---

volumes:
  influxdb2_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/influxdb/data/"

  influxdb_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/influxdb/config/"

  # Think this was a collectd thing
  # influxdb_types:
  #   driver: local
  #   driver_opts:
  #     type: nfs4
  #     o: addr=172.24.32.5,rw
  #     device: ":/srv/nfs4/docker_nfs/influxdb/types.db"

      # - influxdb2:/var/lib/influxdb2

      # - /docker/influxdb/config/:/etc/influxdb/
      # - /docker/influxdb/types.db:/usr/share/collectd/types.db

  uptime-kuma:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: "/srv/nfs4/docker_nfs/uptime-kuma/"

  scrutiny_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/scrutiny/config/"

  scrutiny_influxdb:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/scrutiny/influxdb/"

  netdataconfig:
  netdatalib:
  netdatacache:

  predbat_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/predbat/config/"

  givtcp:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw,sync,rsize=0,wsize=0
      device: ":/srv/nfs4/docker_nfs/givtcp/"

  ebusd:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/ebusd/config/"

  chronograf_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/chronograf/data/"

  grafana:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/grafana/"

  double_take_storage:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/double_take/storage/"

  node-red_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/node-red/data/"

  mosquitto_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/mosquitto/config/"

  mosquitto_logs:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/mosquitto/log/"

  mosquitto_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/mosquitto/data/"

  zigbee2mqtt_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/zigbee2mqtt/data/"

  frigate_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/frigate/config/"

  frigate_db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/frigate/db/"

  frigate_cctv:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/cctv/frigate/"
      device: ":/media/Tank/CCTV/frigate/"

  esphome_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/home-assistant/config/esphome/"

  home-assistant_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/home-assistant/config/"

  pihole_etc:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw,sync,rsize=0,wsize=0
      device: ":/srv/nfs4/docker_nfs/pihole/etc/"
  pihole_dnsmasq:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw,sync,rsize=0,wsize=0
      device: ":/srv/nfs4/docker_nfs/pihole/dnsmasq/"

  whisper:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/whisper/"
  piper:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/piper"

networks:
    traefik_proxy:
      external: true
      name: frontend_traefik_proxy

    homeautomation:
      name: homeautomation

    unifi:
      name: unifi

    scrutiny:
      name: scrutiny

    # lan_network:
    #   driver: macvlan
    #   driver_opts:
    #     parent: eth0          # <-- using default network
    #   ipam:
    #     config:
    #       - subnet: 172.24.32.0/24         # <-- Update
    #         gateway: 172.24.32.1         # <-- Update
    #         ip_range: 172.24.32.240/32         # <-- Update

services:
  pihole:
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole-http.entrypoints=web
      - traefik.http.routers.pihole-http.rule=Host(`pihole.viewpoint.house`)
      - traefik.http.routers.pihole-http.middlewares=pihole-https
      - traefik.http.middlewares.pihole-https.redirectscheme.scheme=https
      - traefik.http.routers.pihole.rule=Host(`pihole.viewpoint.house`)
      - traefik.http.routers.pihole.tls=true
      - traefik.http.routers.pihole.tls.certresolver=letsencrypt
      - traefik.http.routers.pihole.tls.domains[0].main=pihole.viewpoint.house
      - traefik.http.routers.pihole.entrypoints=websecure
      - traefik.http.services.pihole.loadbalancer.server.port=80
      - traefik.http.services.pihole.loadbalancer.healthcheck.path=/admin/login.php
      - traefik.http.services.pihole.loadbalancer.healthcheck.port=80
      - homepage.group=Management
      - homepage.icon=mdi-wifi
      - homepage.name=Pi-hole
      - homepage.href=https://pihole.viewpoint.house/admin/login.php
    container_name: pihole
    image: pihole/pihole:latest
    # image: pihole/pihole@sha256:0def896a596e8d45780b6359dbf82fc8c75ef05b97e095452e67a0a4ccc95377
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "172.24.32.13:53:53/tcp"
      - "172.24.32.13:53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "90:80/tcp"
    networks:
      - traefik_proxy
    env_file:
      - .pihole.env
    volumes:
      - 'pihole_etc:/etc/pihole'
      - 'pihole_dnsmasq:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - CAP_SYS_NICE
      - CAP_NET_BIND_SERVICE
      - CAP_NET_RAW
      - CAP_CHOWN
    #   - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped

  home-assistant:
    image: homeassistant/home-assistant:latest
    container_name: home-assistant
    depends_on:
      zigbee2mqtt:
          condition: service_healthy
      eclipse-mosquitto:
          condition: service_started
      pihole:
          condition: service_healthy
    restart: unless-stopped
    labels:
      # https://techoverflow.net/2022/03/27/how-to-fix-traefik-could-not-define-the-service-name-for-the-router-too-many-services/
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.ha.rule=Host(`viewpoint.house`) || Host(`172.24.32.13`)
      - traefik.http.routers.ha.entrypoints=haweb
      - traefik.http.routers.ha.service=ha
      - traefik.http.services.ha.loadbalancer.server.port=8123
      - traefik.http.services.ha.loadbalancer.healthcheck.path=/
      - traefik.http.services.ha.loadbalancer.healthcheck.port=8123
      - traefik.http.routers.ha_hue.rule=Host(`viewpoint.house`) || Host(`172.24.32.13`)
      - traefik.http.routers.ha_hue.entrypoints=web
      - traefik.http.routers.ha_hue.service=ha_hue
      - traefik.http.services.ha_hue.loadbalancer.server.port=80
      - traefik.http.services.ha_hue.loadbalancer.healthcheck.path=/api/
      - traefik.http.services.ha_hue.loadbalancer.healthcheck.port=80

      - traefik.http.routers.hasecure.rule=Host(`viewpoint.house`) || Host(`172.24.32.13`)
      - traefik.http.routers.hasecure.entrypoints=websecure
      - traefik.http.routers.hasecure.service=ha
      - traefik.http.routers.hasecure.tls=true
      - traefik.http.routers.hasecure.tls.certresolver=letsencrypt
      - traefik.http.routers.hasecure.tls.domains[0].main=viewpoint.house
      - traefik.http.services.hasecure.loadbalancer.server.port=8123
      - traefik.http.services.hasecure.loadbalancer.healthcheck.path=/
      - traefik.http.services.hasecure.loadbalancer.healthcheck.port=8123
      - homepage.group=Home Automation
      - homepage.name=Home Assistant
      - homepage.icon=mdi-home-assistant
      - homepage.href=https://viewpoint.house
      - homepage.description=Home Assistant
      - com.centurylinklabs.watchtower.lifecycle.pre-check=exit 0
      - com.centerylinklabs.watchtower.enable=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    # network_mode: host
    networks:
      - traefik_proxy
      - homeautomation
    ports:
      - 1900:1900/udp
      - 2869:2869/tcp
      # - 5353:5353/udp
      # - 5353:5353/tcp
    environment:
      - PUID=200
      - PGID=200
    # Not supported in Swarm
    # devices:
    #   - /dev/serial/by-id/usb-RFXCOM_RFXtrx433_A1WRPEJT-if00-port0:/dev/ttyUSB0
    volumes:
      - home-assistant_config:/config
      - frigate_cctv:/media/frigate_cctv
      - /etc/localtime:/etc/localtime:ro
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  EPLZones:
    image: everythingsmarthome/everything-presence-mmwave-configurator:latest
    container_name: everything-presence-mmwave-configurator
    restart: unless-stopped
    networks:
      - traefik_proxy
      - homeautomation
    env_file:
      - .eplzones.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.EPLZones.rule=Host(`eplzones.viewpoint.house`)
      - traefik.http.routers.EPLZones.entrypoints=websecure
      - traefik.http.routers.EPLZones.tls.certresolver=letsencrypt
      - traefik.http.routers.EPLZones.tls.domains[0].main=eplzones.viewpoint.house
      - traefik.http.services.EPLZones.loadbalancer.server.port=8099
      - traefik.http.services.EPLZones.loadbalancer.healthcheck.path=/
      - traefik.http.services.EPLZones.loadbalancer.healthcheck.port=8099
      - homepage.group=Home Automation
      - homepage.name=EPL Zones
      - homepage.icon=mdi-home-assistant
      - homepage.href=https://eplzones.viewpoint.house
      - homepage.description=EPL Zones

  GivTCP:
    # https://wiki.terravolt.co.uk/docs/givtcp-installation-version-2-0/
    container_name: GivTCP
    image: britkat/giv_tcp-ma:latest
    # ports:
    #   - "8099:8099"                   # REST and Config web server (https on 8098)
    #   - "3030:3030"                   # WEB Dashboard
    #   - "6345:6345"
    depends_on:
      - eclipse-mosquitto
    networks:
      - traefik_proxy
      - homeautomation
    volumes:
      - givtcp:/config/GivTCP
    restart: unless-stopped
    privileged: true
    healthcheck:
      # Must be a hostname or address of the container itself. Does not listen on localhost
      test: "wget --no-verbose --tries=1 --spider http://GivTCP:8099 || exit 1"
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.givtcp.rule=Host(`givtcp.viewpoint.house`)
      - traefik.http.routers.givtcp.entrypoints=websecure
      - traefik.http.routers.givtcp.tls.certresolver=letsencrypt
      - traefik.http.routers.givtcp.tls.domains[0].main=givtcp.viewpoint.house
      - traefik.http.services.givtcp.loadbalancer.server.port=8099
      - traefik.http.services.givtcp.loadbalancer.healthcheck.path=/
      - traefik.http.services.givtcp.loadbalancer.healthcheck.port=8099
      - homepage.group=Home Automation
      - homepage.name=GivTCP
      - homepage.icon=mdi-home-assistant
      - homepage.href=https://givtcp.viewpoint.house
      - homepage.description=GivTCP

  predbat:
    container_name: predbat
    image: nipar44/predbat_addon:latest
    restart: unless-stopped
    volumes:
      # - /docker/predbat/config:/config:rw
      - predbat_config:/config:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik_proxy
      - homeautomation
    depends_on:
      GivTCP:
          condition: service_started
      home-assistant:
          condition: service_healthy
      pihole:
          condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.predbat.rule=Host(`predbat.viewpoint.house`)
      - traefik.http.routers.predbat.entrypoints=websecure
      - traefik.http.routers.predbat.tls.certresolver=letsencrypt
      - traefik.http.routers.predbat.tls.domains[0].main=predbat.viewpoint.house
      - traefik.http.services.predbat.loadbalancer.server.port=5052
      - traefik.http.services.predbat.loadbalancer.healthcheck.path=/
      - traefik.http.services.predbat.loadbalancer.healthcheck.port=5052
      - homepage.group=Home Automation
      - homepage.name=Predbat
      - homepage.icon=mdi-home-assistant
      - homepage.href=https://predbat.viewpoint.house
      - homepage.description=Predbat

  whisper:
    container_name: whisper
    restart: unless-stopped
    command: --model small --language en
    image: rhasspy/wyoming-whisper:latest
    # network_mode: host
    networks:
      - homeautomation
    volumes:
      - whisper:/data
    # environment:
    #   - TZ=Europe/London
    ports:
      - 10300:10300
    labels:
      - com.centurylinklabs.watchtower.enable=true

  piper:
    container_name: piper
    restart: unless-stopped
    # image: rhasspy/wyoming-piper:latest
    image: lscr.io/linuxserver/piper:latest
    #  command: --voice nl-nathalie-x-low
    # command: --voice en-gb-southern_english_female-low
    # network_mode: host
    networks:
      - homeautomation
    volumes:
      - piper:/data
    env_file:
      - .piper.env
    environment:
      - TZ=Europe/London
    ports:
      - 10200:10200
    labels:
      - com.centurylinklabs.watchtower.enable=true

  # openwakeword:
  #   container_name: openwakeword
  #   command: --model 'ok_nabu' --model 'hey_jarvis' --model 'hey_rhasspy' --model 'hey_mycroft' --model 'alexa' --preload-model 'ok_nabu'
  #   image: rhasspy/wyoming-openwakeword:latest
  #   networks:
  #     - homeautomation
  #   environment:
  #     - TZ=Europe/London
  #   restart: unless-stopped
  #   ports:
  #     - 10400:10400
  #   # healthcheck:
  #     # test: ["CMD", "curl", "-f", "http://localhost:10300"]
  #     # echo '{"type":"describe"}'|nc -w 1 localhost 10300
  #   labels:
  #     - com.centurylinklabs.watchtower.enable=true

  mdns_repeater:
    image: jdbeeler/mdns-repeater:latest
    network_mode: "host"
    privileged: true
    env_file:
      - .mdns.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # mdns-repeater:
  #   image: jdelker/mdns-repeater:latest
  #   network_mode: "host"
  #   privileged: true
  #   environment:
  #     INTERFACES: "eth0"
  #     DOCKER_NETWORKS: "homeautomation"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

  # mdns-repeater:
  #   image: monstrenyatko/mdns-repeater:latest
  #   container_name: mdns-repeater
  #   restart: unless-stopped
  #   # environment:
  #   #   - MDNS_REPEATER_INTERFACES=eth0 docker0
  #   # The result of ifconfig | grep -i `docker network ls | grep -i traefik | awk '{print $1}'` | awk '{print $1}'
  #   # command: mdns-repeater-app -f eth0 br-d5e10b6d76a1
  #   command: mdns-repeater-app -d -f eth0 docker0
  #   network_mode: "host"

  # multicast-relay:
  #   container_name: multicast-relay
  #   image: kidhasmoxy/multicast-relay
  #   hostname: mdnsrelay
  #   networks:
  #     - homeautomation
  #     - lan_network
  #   restart: unless-stopped
  #   # ssdpUnicastAddr should be on IoT vlan to allow for simple firewall config (as return queries can go to pretty random ports)
  #   command: --foreground --interfaces eth0 br-d5e10b6d76a1 --wait --verbose --relay 224.0.0.251:80 255.255.255.255:80 --ssdpUnicastAddr 192.168.20.240

  # multicast-relay:
  #   image: scyto/multicast-relay
  #   # container_name: multicast-relay
  #   # hostname: mdnsrelay
  #   network_mode: "host"
  #   # networks:
  #   #   - homeautomation
  #   #   - lan_network
  #   env_file:
  #     - .multicast-relay.env
  #   # restart: unless-stopped
  #   # ssdpUnicastAddr should be on IoT vlan to allow for simple firewall config (as return queries can go to pretty random ports)
  #   # command: --foreground --interfaces eth0 br-d5e10b6d76a1 --wait --verbose --relay 224.0.0.251:80 255.255.255.255:80 --ssdpUnicastAddr 192.168.20.240

  ebusd:
    # alternatively, use "john30/ebusd:devel" for the latest build of the current source code
    image: john30/ebusd:latest
    container_name: ebusd
    restart: unless-stopped
    env_file:
      - .ebusd.env
    ports:
      - 8888:8888
      # when enabling the HTTP port, add it to the published ports as well:
      - 8081:8080
    depends_on:
      - eclipse-mosquitto
    volumes:
      - ebusd:/config
    labels:
      - com.centurylinklabs.watchtower.enable=true


  esphome:
    image: ghcr.io/esphome/esphome:latest
    container_name: esphome
    # depends_on:
    #   - mdns-repeater
    networks:
      - traefik_proxy
      - homeautomation
    # network_mode: host
    # https://doc.traefik.io/traefik/providers/docker/#host-networking
    restart: unless-stopped
    environment:
      - TZ=Europe/London
      # - ESPHOME_DASHBOARD_USE_PING=true
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.esphome-http.entrypoints=web
      - traefik.http.routers.esphome-http.rule=Host(`esphome.viewpoint.house`)
      - traefik.http.routers.esphome-http.middlewares=esphome-https
      - traefik.http.middlewares.esphome-https.redirectscheme.scheme=https
      - traefik.http.routers.esphome.rule=Host(`esphome.viewpoint.house`)
      - traefik.http.routers.esphome.entrypoints=websecure
      - traefik.http.routers.esphome.tls=true
      - traefik.http.routers.esphome.tls.certresolver=letsencrypt
      - traefik.http.routers.esphome.tls.domains[0].main=esphome.viewpoint.house
      - traefik.http.services.esphome.loadbalancer.server.port=6052
      - traefik.http.services.esphome.loadbalancer.healthcheck.path=/
      - traefik.http.services.esphome.loadbalancer.healthcheck.port=6052
      - homepage.group=Home Automation
      - homepage.name=ESPHome
      - homepage.icon=mdi-chip
      - homepage.href=https://esphome.viewpoint.house
      - homepage.description=IOT Firmware Management
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6052"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      # - /docker/home-assistant/config/esphome:/config
      - esphome_config:/config
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    restart: unless-stopped
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1"
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - traefik_proxy
      - homeautomation
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.z2m-http.entrypoints=web
      - traefik.http.routers.z2m-http.rule=Host(`z2m.viewpoint.house`)
      - traefik.http.routers.z2m-http.middlewares=z2m-https
      - traefik.http.middlewares.z2m-https.redirectscheme.scheme=https
      - traefik.http.routers.z2m.rule=Host(`z2m.viewpoint.house`)
      - traefik.http.routers.z2m.entrypoints=websecure
      - traefik.http.routers.z2m.tls=true
      - traefik.http.routers.z2m.tls.certresolver=letsencrypt
      - traefik.http.routers.z2m.tls.domains[0].main=z2m.viewpoint.house
      - traefik.http.services.z2m.loadbalancer.server.port=8080
      - traefik.http.services.z2m.loadbalancer.healthcheck.path=/
      - traefik.http.services.z2m.loadbalancer.healthcheck.port=8080
      - homepage.group=Home Automation
      - homepage.name=Zigbee2MQTT
      - homepage.icon=mdi-zigbee
      - homepage.href=https://z2m.viewpoint.house
      - homepage.description=Zigbee Management
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - zigbee2mqtt_data:/app/data
      - /run/udev:/run/udev:ro
    # environment:
    #   - TZ=Europe/London

  eclipse-mosquitto:
    image: eclipse-mosquitto:latest
    container_name: eclipse-mosquitto
    restart: unless-stopped
    ports:
      - 1883:1883
      - 9001:9001
    labels:
      - com.centurylinklabs.watchtower.enable=true
    networks:
      - traefik_proxy
      - homeautomation
    volumes:
        - mosquitto_config:/mosquitto/config
        - mosquitto_data:/mosquitto/data
        - mosquitto_logs:/mosquitto/log
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"


  nodered:
    restart: unless-stopped
    image: nodered/node-red:latest
    container_name: node-red
    depends_on:
      eclipse-mosquitto:
          condition: service_started
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.nodered-http.entrypoints=web
      - traefik.http.routers.nodered-http.rule=Host(`nodered.viewpoint.house`)
      - traefik.http.routers.nodered-http.middlewares=nodered-https
      - traefik.http.middlewares.nodered-https.redirectscheme.scheme=https
      - traefik.http.routers.nodered.rule=Host(`nodered.viewpoint.house`)
      - traefik.http.routers.nodered.entrypoints=websecure
      - traefik.http.routers.nodered.tls=true
      - traefik.http.routers.nodered.tls.certresolver=letsencrypt
      - traefik.http.routers.nodered.tls.domains[0].main=nodered.viewpoint.house
      - traefik.http.services.nodered.loadbalancer.server.port=1880
      - traefik.http.services.nodered.loadbalancer.healthcheck.path=/
      - traefik.http.services.nodered.loadbalancer.healthcheck.port=1880
      - homepage.group=Home Automation
      - homepage.name=Node Red
      - homepage.href=http://nodered.viewpoint.house
      - homepage.icon=si-node-red
      - homepage.description=MQTT Management
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1880"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - traefik_proxy
      - homeautomation
    # environment:
    #   TZ: Europe/London
    user: root:root
    volumes:
      - node-red_data:/data
      - /etc/localtime:/etc/localtime:ro
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  frigate:
    container_name: frigate
    privileged: true # this may not be necessary for all setups
    restart: unless-stopped
    networks:
      - traefik_proxy
      - homeautomation
    depends_on:
      eclipse-mosquitto:
          condition: service_started
    image: ghcr.io/blakeblackshear/frigate:stable
    devices:
        - /dev/dri
        - /dev/kfd
    #   - /dev/bus/usb:/dev/bus/usb
    #   - /dev/dri/card0 # for intel hwaccel, needs to be updated for your hardware
    shm_size: "2g"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - frigate_cctv:/media/frigate
      - frigate_db:/frigate_db
      - frigate_config:/config
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    ports:
      # - "4999:5000"
      # - "1935:1935" # RTMP feeds (deprecated) - move to Traefik TCP
      - "1984:1984" # API
      - "8554:8554" # RTSP feeds
      - "8443:8443" # SRTP feeds
      - "8555:8555" # WEBRTC feeds
    healthcheck:
      test: ["CMD", "curl", "-sI", "http://localhost:5000/"]
      interval: 30s
      timeout: 1s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.frigate-http.entrypoints=web
      - traefik.http.routers.frigate-http.rule=Host(`cctv.viewpoint.house`)
      - traefik.http.routers.frigate-http.middlewares=frigate-https
      - traefik.http.middlewares.frigate-https.redirectscheme.scheme=https
      - traefik.http.routers.frigate.rule=Host(`cctv.viewpoint.house`)
      - traefik.http.routers.frigate.entrypoints=websecure
      - traefik.http.routers.frigate.tls=true
      - traefik.http.routers.frigate.tls.certresolver=letsencrypt
      - traefik.http.routers.frigate.tls.domains[0].main=cctv.viewpoint.house
      - traefik.http.services.frigate.loadbalancer.server.port=5000
      - traefik.http.services.frigate.loadbalancer.healthcheck.path=/
      - traefik.http.services.frigate.loadbalancer.healthcheck.port=5000

      - homepage.group=Home Automation
      - homepage.icon=mdi-cctv
      - homepage.name=Frigate
      - homepage.href=http://cctv.viewpoint.house
      - homepage.description=CCTV
      - com.centurylinklabs.watchtower.enable=true
    #logging:
    #  driver: gelf
    #  options:
    #    gelf-address: "udp://172.24.32.13:12201"
    #    tag: "{{.Name}}"
    env_file:
      - .frigate.env

  double-take:
    container_name: double-take
    image: jakowenko/double-take:latest
    networks:
      - traefik_proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - eclipse-mosquitto
      - frigate
    volumes:
      - double_take_storage:/.storage
    labels:
      - traefik.enable=true
      - traefik.http.routers.double-take.rule=Host(`double-take.viewpoint.house`)
      - traefik.http.routers.double-take.entrypoints=websecure
      - traefik.http.routers.double-take.tls=true
      - traefik.http.routers.double-take.tls.certresolver=letsencrypt
      - traefik.http.routers.double-take.tls.domains=double-take.viewpoint.house
      - traefik.http.services.double-take.loadbalancer.server.port=3000
      - traefik.http.services.double-take.loadbalancer.healthcheck.path=/
      - traefik.http.services.double-take.loadbalancer.healthcheck.port=3000
      - homepage.group=Home Automation
      - homepage.icon=mdi-tag-faces
      - homepage.name=Double-Take
      - homepage.href=https://double-take.viewpoint.house
      - homepage.description=Facial Recognition Service
      - com.centurylinklabs.watchtower.enable=true
    logging:
      driver: gelf
      options:
        gelf-address: "udp://72.24.32.13:12201"
        tag: "{{.Name}}"

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    volumes:
      - uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik_proxy
    healthcheck:
      test: ["CMD", "curl", "-sI", "http://localhost:3001/"]
      interval: 30s
      timeout: 1s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime-http.entrypoints=web
      - traefik.http.routers.uptime-http.rule=Host(`uptime.viewpoint.house`)
      - traefik.http.routers.uptime-http.middlewares=uptime-https
      - traefik.http.middlewares.uptime-https.redirectscheme.scheme=https
      - traefik.http.routers.uptime.rule=Host(`uptime.viewpoint.house`)
      - traefik.http.routers.uptime.entrypoints=websecure
      - traefik.http.routers.uptime.tls=true
      - traefik.http.routers.uptime.tls.certresolver=letsencrypt
      - traefik.http.routers.uptime.tls.domains[0].main=uptime.viewpoint.house
      - traefik.http.services.uptime.loadbalancer.server.port=3001
      - traefik.http.services.uptime.loadbalancer.healthcheck.path=/
      - traefik.http.services.uptime.loadbalancer.healthcheck.port=3001
      # - traefik.http.routers.uptime.middlewares=authelia@docker
      - homepage.group=Monitoring
      - homepage.name=Uptime Kuma
      - homepage.href=https://uptime.viewpoint.house
      - homepage.description=Uptime Kuma
      - homepage.icon=si-uptime-kuma
      - com.centurylinklabs.watchtower.enable=true
    logging:
      driver: gelf
      options:
        gelf-address: "udp://72.24.32.13:12201"
        tag: "{{.Name}}"

  scrutiny_web:
    image: 'ghcr.io/analogj/scrutiny:master-web'
    # ports:
    #   - '8080:8080'
    networks:
      - traefik_proxy
      - scrutiny
    volumes:
      - 'scrutiny_config:/opt/scrutiny/config'
    restart: unless-stopped
    environment:
      SCRUTINY_WEB_INFLUXDB_HOST: 'scrutiny_influxdb'
    depends_on:
      scrutiny_influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 10s
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.scrutiny-web-http.entrypoints=web
      - traefik.http.routers.scrutiny-web-http.rule=Host(`scrutiny.viewpoint.house`)
      - traefik.http.routers.scrutiny-web-http.middlewares=scrutiny-web-https
      - traefik.http.middlewares.scrutiny-web-https.redirectscheme.scheme=https
      - traefik.http.routers.scrutiny-web.rule=Host(`scrutiny.viewpoint.house`)
      - traefik.http.routers.scrutiny-web.entrypoints=websecure
      - traefik.http.routers.scrutiny-web.tls=true
      - traefik.http.routers.scrutiny-web.tls.certresolver=letsencrypt
      - traefik.http.routers.scrutiny-web.tls.domains=scrutiny.viewpoint.house
      - traefik.http.services.scrutiny-web.loadbalancer.server.port=8080
      - traefik.http.services.scrutiny-web.loadbalancer.healthcheck.path=/api/health
      - traefik.http.services.scrutiny-web.loadbalancer.healthcheck.port=8080
      - homepage.group=Monitoring
      - homepage.name=Scrutiny Web
      - homepage.href=https://scrutiny.viewpoint.house
      - homepage.description=Scrutiny Web
      - homepage.icon=si-scrutiny
      - com.centurylinklabs.watchtower.enable=true

  scrutiny_influxdb:
    image: influxdb:2.2
    # ports:
    #   - '8086:8086'
    networks:
      - scrutiny
    volumes:
      - 'scrutiny_influxdb:/var/lib/influxdb2'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 5s
      timeout: 10s
      retries: 20

  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi-network-application
    networks:
      - unifi
    depends_on:
      - unifi-db
    env_file:
      - .unifi.env
    volumes:
      - /docker/unifi-network-application:/config
    # networks:
    #   - enp0s31f6
#    ports:
#      - "10.0.1.102:7878:7878"
    ports:
      - 8444:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      # - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    labels:
      - traefik.enable=true
      - traefik.http.routers.unifi-controller.rule=Host(`unifi.viewpoint.house`)
      - traefik.http.routers.unifi-controller.entrypoints=websecure
      - traefik.http.routers.unifi-controller.tls=true
      - traefik.http.routers.unifi-controller.tls.certresolver=letsencrypt
      - traefik.http.routers.unifi-controller.tls.domains[0].main=unifi.viewpoint.house
      - traefik.http.services.unifi-controller.loadbalancer.server.port=8081
      - traefik.http.services.unifi-controller.loadbalancer.server.scheme=https
      # - traefik.http.services.unifi-controller.loadbalancer.healthcheck.path=/
      # - traefik.http.services.unifi-controller.loadbalancer.healthcheck.port=8080
      - homepage.group=Management
      - homepage.name=Unifi Wifi
      - homepage.icon=mdi-wifi
      - homepage.href=https://unifi.viewpoint.house:8444
      - homepage.description=Unifi Wireless Management
    restart: unless-stopped

  unifi-db:
    image: docker.io/mongo:4
    # I have to use v4, as v5+ requires a CPU with AVX support
    # container_name: unifi-db
    networks:
      - unifi
    volumes:
      - /docker/unifi-network-application-database:/data/db
      - /docker/unifi-network-application/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: unless-stopped

#  pialert:
#    container_name: pialert
#    network_mode: host
#    restart: always
#    volumes:
#      - /docker/pialert/config:/home/pi/pialert/config
#      - /docker/pialert/db/pialert.db:/home/pi/pialert/db/pialert.db
#      - /docker/pialert/logs:/home/pi/pialert/log
#    environment:
#      - TZ=Europe/London
#      - PORT=20211
#      - HOST_USER_ID=1000
#      - HOST_USER_GID=1000

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana-http.entrypoints=web
      - traefik.http.routers.grafana-http.rule=Host(`grafana.viewpoint.house`)
      - traefik.http.routers.grafana-http.middlewares=grafana-https
      - traefik.http.middlewares.grafana-https.redirectscheme.scheme=https
      - traefik.http.routers.grafana.rule=Host(`grafana.viewpoint.house`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.routers.grafana.tls.domains[0].main=grafana.viewpoint.house
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.services.grafana.loadbalancer.healthcheck.path=/
      - traefik.http.services.grafana.loadbalancer.healthcheck.port=3000
      - homepage.group=Monitoring
      - homepage.name=Grafana
      - homepage.icon=si-grafana
      - homepage.href=https://grafana.viewpoint.house
      - homepage.description=Grafana
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      # test: ["CMD", "wget", "--spider", "-tries=1", "--quiet", "http://172.24.32.13:3000/api/health"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    env_file:
      - .grafana.env
    volumes:
      - grafana:/var/lib/grafana/
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: unless-stopped
    volumes:
      # Mount for influxdb data directory - this is an LVM volume on homeauto
      # - /var/lib/influxdb:/var/lib/influxdb # unused
      # - influxdb2:/home/influxdb/.influxdbv2 # surplus
      - influxdb2_data:/var/lib/influxdb2
      # Mount for influxdb configuration
      - influxdb_config:/etc/influxdb/
      # - influxdb_types:/usr/share/collectd/types.db
      # - /docker/influxdb/config/:/etc/influxdb/
      # - /docker/influxdb/types.db:/usr/share/collectd/types.db
    networks:
      - traefik_proxy
    ports:
      # The API for InfluxDB is served on port 8086
      - "8086:8086"
      - "8082:8082"
      - "25826:25826"
    labels:
      - traefik.enable=true
      - traefik.http.routers.influxdb-http.entrypoints=web
      - traefik.http.routers.influxdb-http.rule=Host(`influxdb.viewpoint.house`)
      - traefik.http.routers.influxdb-http.middlewares=influxdb-https
      - traefik.http.middlewares.influxdb-https.redirectscheme.scheme=https
      - traefik.http.routers.influxdb.rule=Host(`influxdb.viewpoint.house`)
      - traefik.http.routers.influxdb.entrypoints=websecure
      - traefik.http.routers.influxdb.tls=true
      - traefik.http.routers.influxdb.tls.certresolver=letsencrypt
      - traefik.http.routers.influxdb.tls.domains[0].main=influxdb.viewpoint.house
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.http.services.influxdb.loadbalancer.healthcheck.path=/
      - traefik.http.services.influxdb.loadbalancer.healthcheck.port=8086
      - homepage.group=Monitoring
      - homepage.name=InfluxDB
      - homepage.icon=si-influxdb
      - homepage.href=http://influxdb.viewpoint.house
      - homepage.description=InfluxDB
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  # chronograf:
  #   image: chronograf:latest
  #   # container_name: chronograf
  #   # restart: unless-stopped
  #   networks:
  #     - traefik_proxy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8888"]
  #     start_period: 15s
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   volumes:
  #     - chronograf_data:/var/lib/chronograf/
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.chronograf.rule=Host(`chronograf.viewpoint.house`)
  #     - traefik.http.routers.chronograf.entrypoints=websecure
  #     - traefik.http.routers.chronograf.tls=true
  #     - traefik.http.routers.chronograf.tls.certresolver=letsencrypt
  #     - traefik.http.routers.chronograf.tls.domains[0].main=chronograf.viewpoint.house
  #     - traefik.http.services.chronograf.loadbalancer.server.port=8888
  #     - traefik.http.services.chronograf.loadbalancer.healthcheck.port=8888
  #     - traefik.http.services.chronograf.loadbalancer.healthcheck.path=/
  #     - homepage.group=Monitoring
  #     - homepage.name=Chronograf
  #     - homepage.icon=mdi-chart-line
  #     - homepage.href=https://chronograf.viewpoint.house
  #     - homepage.description=Chronograf
  #     - com.centurylinklabs.watchtower.enable=true
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

  # telegraf:
  #   image: telegraf:latest
  #   container_name: telegraf
  #   # links:
  #   #   - influxdb
  #   ports:
  #     - "8094:8094"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/run/utmp:/var/run/utmp:ro
  #     - /docker/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
  #   # environment:
  #   #   INPUT_DOCKER_ENABLED: "true"
  #   #   INPUT_LISTENER_ENABLED: "true"
  #   #   INPUT_CPU_ENABLED: "false"
  #   #   INPUT_DISK_ENABLED: "false"
  #   #   # DISK_IGNOREFS: '["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]'
  #   #   INPUT_DISKIO_ENABLED: "false"
  #   #   INPUT_KERNEL_ENABLED: "false"
  #   #   INPUT_MEM_ENABLED: "false"
  #   #   INPUT_PROCESS_ENABLED: "false"
  #   #   INPUT_SWAP_ENABLED: "true"
  #   #   INPUT_SYSTEM_ENABLED: "true"
  #   #   INPUT_NETSTAT_ENABLED: "true"
  #   #   INPUT_NET_ENABLED: "false"
  #   #   OUTPUT_INFLUXDB_ENABLED: "true"
  #   #   INFLUXDB_URL: "http://172.24.32.13:8086"
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

  Watchtower:
    image: v2tec/watchtower:latest
    command: "--label-enable"
    container_name: Watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .watchtower.env
    labels:
      - com.centurylinklabs.watchtower.enable=true
    restart: unless-stopped
