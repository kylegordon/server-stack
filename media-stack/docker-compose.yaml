
# https://github.com/HaoZeke/starDock_compose/blob/master/docker-compose.yml
# https://www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/#Traefik_Docker_Compose_Examples
#

services:
  nginx_core:
    image: nginx:latest
    container_name: nginx_core
    restart: unless-stopped
    volumes:
      - nginx_core_conf:/etc/nginx
      - nginx_core_data:/var/www
    networks:
      - traefik_proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx_core.rule=Host(`core.vpn.glasgownet.com`)
      - traefik.http.routers.nginx_core.entrypoints=web
      - traefik.http.routers.nginx_core-viewpoint.rule=Host(`core.viewpoint.house`)
      - traefik.http.routers.nginx_core-viewpoint.entrypoints=web
      - traefik.http.routers.nginx_core-https.rule=Host(`core.viewpoint.house`)
      - traefik.http.routers.nginx_core-https.entrypoints=websecure
      - traefik.http.routers.nginx_core-https.tls=true
      - traefik.http.routers.nginx_core-https.tls.certresolver=letsencrypt
      - traefik.http.routers.nginx_core-https.tls.domains[0].main=core.viewpoint.house
      - homepage.group=Management
      - homepage.name=Core Web
      - homepage.href=https://core.viewpoint.house
      - homepage.description=Core Web Files
      - com.centurylinklabs.watchtower.enable=true

  ## Deploy this later, when ready
  # piwigo:
  #   image: lscr.io/linuxserver/piwigo
  #   container_name: piwigo
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - </path/to/appdata/config>:/config
  #     - </path/to/appdata/gallery>:/gallery
  #   ports:
  #     - 80:80
  #   restart: unless-stopped

  miniflux:
    image: miniflux/miniflux:latest
    depends_on:
      miniflux_db:
          condition: service_healthy
    env_file:
      - .miniflux.env
    restart: unless-stopped
    networks:
      - traefik_proxy
      - miniflux
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.miniflux-http.entrypoints=web
      - traefik.http.routers.miniflux-http.rule=Host(`news.viewpoint.house`)
      - traefik.http.routers.miniflux-http.middlewares=miniflux-https
      - traefik.http.middlewares.miniflux-https.redirectscheme.scheme=https
      - traefik.http.routers.miniflux.rule=Host(`news.viewpoint.house`)
      - traefik.http.routers.miniflux.entrypoints=websecure
      - traefik.http.routers.miniflux.tls=true
      - traefik.http.routers.miniflux.tls.certresolver=letsencrypt
      - traefik.http.routers.miniflux.tls.domains[0].main=news.viewpoint.house
      - traefik.http.services.miniflux.loadbalancer.server.port=8080
      # - traefik.http.services.miniflux.loadbalancer.healthcheck.port=8080
      # - traefik.http.services.miniflux.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-newspaper
      - homepage.name=Miniflux News
      - homepage.href=http://news.viewpoint.house
      - homepage.description=News RSS Aggegrator
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]

  miniflux_db:
    image: postgres:15
    env_file:
      - .miniflux.env
    restart: unless-stopped
    networks:
      - miniflux
    volumes:
      - miniflux-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s
      start_period: 30s
    labels:
      - com.centurylinklabs.watchtower.enable=true


  ## Music Assistant disabled whilst I figure out the MDNS/5353/Openhome stuff
  # music-assistant-server:
  #   image: ghcr.io/music-assistant/server:latest
  #   container_name: music-assistant-server
  #   restart: unless-stopped
  #   # Network mode must be set to host for MA to work correctly
  #   network_mode: host
  #   volumes:
  #     - music-assistant:/data/
  #   # privileged caps needed to mount smb folders within the container
  #   cap_add:
  #     - SYS_ADMIN
  #     - DAC_READ_SEARCH
  #   privileged: true
  #   environment:
  #     # Provide logging level as environment variable.
  #     # default=info, possible=(critical, error, warning, info, debug, verbose)
  #     - LOG_LEVEL=info
  #   labels:
  #     - traefik.enable=true
  #     # - traefik.docker.network=frontend_traefik_proxy
  #     - traefik.http.routers.music-http.entrypoints=web
  #     - traefik.http.routers.music-http.rule=Host(`music.viewpoint.house`)
  #     - traefik.http.routers.music-http.middlewares=music-https
  #     - traefik.http.middlewares.music-https.redirectscheme.scheme=https
  #     - traefik.http.routers.music.rule=Host(`music.viewpoint.house`)
  #     - traefik.http.routers.music.entrypoints=websecure
  #     - traefik.http.routers.music.tls=true
  #     - traefik.http.routers.music.tls.certresolver=letsencrypt
  #     - traefik.http.routers.music.tls.domains[0].main=music.viewpoint.house
  #     - traefik.http.services.music.loadbalancer.server.port=8095

# # https://docs.ombi.app/settings/all-the-arrs/
#   ombi:
#     image: ghcr.io/linuxserver/ombi:latest
#     container_name: ombi
#     restart: unless-stopped
#     networks:
#       - traefik_proxy
#       - ombi_network
#     environment:
#       - PUID=1000
#       - PGID=1000
#       - TZ=Europe/London
#     volumes:
#       - /docker/ombi/config:/config
#     # ports:
#     #   - "5002:3579"
#     depends_on:
#       - "ombi_mysql_db"
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=frontend_traefik_proxy
#       - traefik.http.routers.ombi.rule=Host(`ombi.viewpoint.house`)
#       - traefik.http.routers.ombi.entrypoints=websecure
#       - traefik.http.routers.ombi.tls=true
#       - traefik.http.routers.ombi.tls.certresolver=letsencrypt
#       - traefik.http.routers.ombi.tls.domains[0].main=ombi.viewpoint.house
#       - traefik.http.services.ombi.loadbalancer.server.port=3579
#       - com.centurylinklabs.watchtower.enable=true

#   ombi_mysql_db:
#     image: "mysql:5.7"
#     container_name: ombi_mysql
#     restart: unless-stopped
#     networks:
#       - ombi_network
#     environment:
#       - MYSQL_ROOT_PASSWORD=${OMBI_MYSQL_ROOT_PASSWORD}
#     volumes:
#       -  /docker/ombi/mysql:/var/lib/mysql
#     labels:
#       - com.centurylinklabs.watchtower.enable=true

#   ombi_phpmyadmin:
#       image: phpmyadmin/phpmyadmin
#       container_name: ombi_phpmyadmin
#       restart: unless-stopped
#       networks:
#         - ombi_network
#         - traefik_proxy
#       environment:
#         PMA_HOST: ombi_mysql_db
#       # ports:
#       #   - '8084:80'
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=frontend_traefik_proxy
#         - traefik.http.routers.ombidb.rule=Host(`ombidb.viewpoint.house`)
#         - traefik.http.routers.ombidb.entrypoints=websecure
#         - traefik.http.routers.ombidb.tls=true
#         - traefik.http.routers.ombidb.tls.certresolver=letsencrypt
#         - traefik.http.routers.ombidb.tls.domains[0].main=ombidb.viewpoint.house
#         - traefik.http.services.ombidb.loadbalancer.server.port=80
#         - com.centurylinklabs.watchtower.enable=true
#       depends_on:
#         - "ombi_mysql_db"


  phpmyadmin:
    image: phpmyadmin
    restart: unless-stopped
    # ports:
    #   - 8080:80
    environment:
      - PMA_ARBITRARY=1
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.phpmyadmin-http.rule=Host(`phpmyadmin.viewpoint.house`)
      - traefik.http.routers.phpmyadmin-http.entrypoints=web
      - traefik.http.routers.phpmyadmin-http.middlewares=phpmyadmin-https
      - traefik.http.middlewares.phpmyadmin-https.redirectscheme.scheme=https
      - traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin.viewpoint.house`)
      - traefik.http.routers.phpmyadmin.entrypoints=websecure
      - traefik.http.routers.phpmyadmin.tls=true
      - traefik.http.routers.phpmyadmin.tls.certresolver=letsencrypt
      - traefik.http.routers.phpmyadmin.tls.domains[0].main=phpmyadmin.viewpoint.house
      - traefik.http.services.phpmyadmin.loadbalancer.server.port=80
      - traefik.http.services.phpmyadmin.loadbalancer.healthcheck.port=80
      - traefik.http.services.phpmyadmin.loadbalancer.healthcheck.path=/
      - com.centurylinklabs.watchtower.enable=true

  nzbget:
    image: linuxserver/nzbget:latest
    container_name: nzbget
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - NZBGET_TRACK=stable
      # - PUID=200
      # - PGID=200
    volumes:
      - nzbget_config:/config
      - nzbget_data:/downloads
      - downloads_intermediate:/intermediate
      - downloads_complete:/complete
      - downloads_tmp:/downloads/tmp
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget-http.entrypoints=web
      - traefik.http.routers.nzbget-http.rule=Host(`nzbget.viewpoint.house`)
      - traefik.http.routers.nzbget-http.middlewares=nzbget-https
      - traefik.http.middlewares.nzbget-https.redirectscheme.scheme=https
      - traefik.http.routers.nzbget.rule=Host(`nzbget.viewpoint.house`)
      - traefik.http.routers.nzbget.entrypoints=websecure
      - traefik.http.routers.nzbget.tls=true
      - traefik.http.routers.nzbget.tls.certresolver=letsencrypt
      - traefik.http.routers.nzbget.tls.domains[0].main=nzbget.viewpoint.house
      - traefik.http.services.nzbget.loadbalancer.server.port=6789
      # - traefik.http.services.nzbget.loadbalancer.healthcheck.port=6789
      # - traefik.http.services.nzbget.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.name=NZBGet
      - homepage.icon=mdi-cloud-download
      - homepage.href=https://nzbget.viewpoint.house
      - homepage.description=Usenet Downloader
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6789"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr
    container_name: recyclarr
    user: 1000:1000
    env_file:
      - .recyclarr.env
    networks:
      - recyclarr
      - traefik_proxy
    volumes:
      - recyclarr_config:/config
    environment:
      - TZ=Europe/London

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - traefik_proxy
      - recyclarr
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.sonarr-http.entrypoints=web
      - traefik.http.routers.sonarr-http.rule=Host(`tv.viewpoint.house`)
      - traefik.http.routers.sonarr-http.middlewares=sonarr-https
      - traefik.http.middlewares.sonarr-https.redirectscheme.scheme=https
      - traefik.http.routers.sonarr.rule=Host(`tv.viewpoint.house`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=letsencrypt
      - traefik.http.routers.sonarr.tls.domains[0].main=tv.viewpoint.house
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.http.services.sonarr.loadbalancer.healthcheck.port=8989
      - traefik.http.services.sonarr.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-television
      - homepage.name=Sonarr
      - homepage.href=https://tv.viewpoint.house
      - homepage.description=TV Show Mangement
      - com.centurylinklabs.watchtower.enable=true
    # environment:
      # - PUID=200
      # - PGID=200
    volumes:
      - sonarr_config:/config
      - complete:/complete
      - complete:/downloads/complete
      - tv:/tv
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - traefik_proxy
      - recyclarr
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.radarr-http.entrypoints=web
      - traefik.http.routers.radarr-http.rule=Host(`movies.viewpoint.house`)
      - traefik.http.routers.radarr-http.middlewares=radarr-https
      - traefik.http.middlewares.radarr-https.redirectscheme.scheme=https
      - traefik.http.routers.radarr.rule=Host(`movies.viewpoint.house`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=letsencrypt
      - traefik.http.routers.radarr.tls.domains[0].main=movies.viewpoint.house
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - traefik.http.services.radarr.loadbalancer.healthcheck.port=7878
      - traefik.http.services.radarr.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=mdi-movie-open-outline
      - homepage.href=https://movies.viewpoint.house
      - homepage.description=Movie Management
      - com.centurylinklabs.watchtower.enable=true
    # environment:
      # - PUID=200
      # - PGID=200
    volumes:
      - radarr_config:/config
      - complete:/complete
      - movies:/movies
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  hydra:
    image: linuxserver/nzbhydra2:latest
    container_name: hydra
    restart: unless-stopped
    environment:
      - PUID=200
      - PGID=200
    networks:
      - traefik_proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5076"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.http.routers.hydra-http.entrypoints=web
      - traefik.http.routers.hydra-http.rule=Host(`hydra.viewpoint.house`)
      - traefik.http.routers.hydra-http.middlewares=hydra-https
      - traefik.http.middlewares.hydra-https.redirectscheme.scheme=https
      - traefik.http.routers.hydra.rule=Host(`hydra.viewpoint.house`)
      - traefik.http.routers.hydra.entrypoints=websecure
      - traefik.http.routers.hydra.tls=true
      - traefik.http.routers.hydra.tls.certresolver=letsencrypt
      - traefik.http.routers.hydra.tls.domains[0].main=hydra.viewpoint.house
      - traefik.http.services.hydra.loadbalancer.server.port=5076
      - traefik.http.services.hydra.loadbalancer.healthcheck.port=5076
      - traefik.http.services.hydra.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.name=Hydra Usenet Index Meta-Search
      - homepage.href=https://hydra.viewpoint.house
      - homepage.description=Hydra Indexer
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - nzbhydra_config:/config
      - nzbhydra_downloads:/downloads
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

#  lidarr:
#    image: linuxserver/lidarr
#    container_name: lidarr
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - TZ=Europe/London
#      - UMASK_SET=022 #optional
#    volumes:
#      - </path/to/appdata/config>:/config
#      - </path/to/music>:/music
#      - </path/to/downloads>:/downloads
#    ports:
#      - 8686:8686
#    restart: unless-stopped

  # lazylibrarian:
  #   image: linuxserver/lazylibrarian:latest
  #   container_name: lazylibrarian
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5299/home"]
  #     start_period: 60s
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - traefik_proxy
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.lazy.rule=Host(`lazy.viewpoint.house`)
  #     - traefik.http.routers.lazy.entrypoints=web
  #     - com.centurylinklabs.watchtower.enable=true
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #     - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
  #   volumes:
  #     - /docker/lazylibrarian/config:/config
  #     - complete:/downloads
  #     - /media/store/ebooks:/ebooks
  #     - /media/store/Audio Books:/audiobooks
  #     - /media/store/home/bagpuss/Arduino_Books:/alternate
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

  # readarr:
  #   image: lscr.io/linuxserver/readarr:develop
  #   container_name: readarr
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - readarr:/config
  #     - complete:/downloads
  #     - ebooks:/ebooks
  #     - audiobooks:/audiobooks
  #   networks:
  #     - traefik_proxy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8787"]
  #     start_period: 15s
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.readarr-http.entrypoints=web
  #     - traefik.http.routers.readarr-http.rule=Host(`books.viewpoint.house`)
  #     - traefik.http.routers.readarr-http.middlewares=readarr-https
  #     - traefik.http.middlewares.readarr-https.redirectscheme.scheme=https
  #     - traefik.http.routers.readarr.rule=Host(`books.viewpoint.house`)
  #     - traefik.http.routers.readarr.entrypoints=websecure
  #     - traefik.http.routers.readarr.tls=true
  #     - traefik.http.routers.readarr.tls.certresolver=letsencrypt
  #     - traefik.http.routers.readarr.tls.domains[0].main=books.viewpoint.house
  #     - traefik.http.services.readarr.loadbalancer.server.port=8787
  #     - traefik.http.services.readarr.loadbalancer.healthcheck.port=8787
  #     - traefik.http.services.readarr.loadbalancer.healthcheck.path=/
  #     - homepage.group=Media
  #     - homepage.icon=mdi-book-open-outline
  #     - homepage.name=Readarr Books
  #     - homepage.href=https://books.viewpoint.house
  #     - homepage.description=Books Management
  #     - com.centurylinklabs.watchtower.enable=true
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    security_opt:
      - seccomp:unconfined #optional
    networks:
      - traefik_proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - PASSWORD= #optional
      - CLI_ARGS= #optional
    volumes:
      - calibre_config:/config
      - ebooks:/books
      - ebooks_import:/books_import
    # ports:
    #  - 8080:8080 # Internal http port
    #  - 8181:8181 # Internal https port
    #  - 8081:8081 # Internal built in webserver port
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.calibre-http.entrypoints=web
      - traefik.http.routers.calibre-http.rule=Host(`calibre.viewpoint.house`)
      - traefik.http.routers.calibre-http.middlewares=calibre-https
      - traefik.http.middlewares.calibre-https.redirectscheme.scheme=https
      - traefik.http.routers.calibre.rule=Host(`calibre.viewpoint.house`)
      - traefik.http.routers.calibre.entrypoints=websecure
      - traefik.http.routers.calibre.service=calibre
      - traefik.http.routers.calibre.tls=true
      - traefik.http.routers.calibre.tls.certresolver=letsencrypt
      - traefik.http.routers.calibre.tls.domains[0].main=calibre.viewpoint.house
      - traefik.http.services.calibre.loadbalancer.server.port=8080
      - traefik.http.services.calibre.loadbalancer.healthcheck.port=8080
      - traefik.http.services.calibre.loadbalancer.healthcheck.path=/

      - traefik.http.routers.calibre-web-https.tls=true
      - traefik.http.routers.calibre-web-https.tls.certresolver=letsencrypt
      - traefik.http.routers.calibre-web-https.tls.domains[0].main=calibre-web.viewpoint.house
      - traefik.http.routers.calibre-web-https.rule=Host(`calibre-web.viewpoint.house`)
      - traefik.http.routers.calibre-web-https.entrypoints=websecure
      - traefik.http.routers.calibre-web-https.service=calibre-web-https
      - traefik.http.services.calibre-web-https.loadbalancer.server.port=8081
      - traefik.http.services.calibre-web-https.loadbalancer.healthcheck.path=/
      - traefik.http.services.calibre-web-https.loadbalancer.healthcheck.port=8081
      - homepage.group=Media
      - homepage.icon=mdi-book-open-outline
      - homepage.name=Calibre Books
      - homepage.href=https://calibre.viewpoint.house
      - homepage.description=Books Management
      - com.centurylinklabs.watchtower.enable=true
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"


  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    networks:
      - traefik_proxy
    restart: unless-stopped
    volumes:
      - jellyfin_config:/config
      - jellyfin_cache:/cache
      - tv:/media/tv
      - movies:/media/movies
      - music:/media/music
      - ebooks:/ebooks
      - audiobooks:/audiobooks
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin-http.entrypoints=web
      - traefik.http.routers.jellyfin-http.rule=Host(`jellyfin.viewpoint.house`)
      - traefik.http.routers.jellyfin-http.middlewares=jellyfin-https
      - traefik.http.middlewares.jellyfin-https.redirectscheme.scheme=https
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.viewpoint.house`)
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=letsencrypt
      - traefik.http.routers.jellyfin.tls.domains[0].main=jellyfin.viewpoint.house
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - traefik.http.services.jellyfin.loadbalancer.healthcheck.port=8096
      - traefik.http.services.jellyfin.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-movie-open-play
      - homepage.name=Jellyfin
      - homepage.href=https://jellyfin.viewpoint.house
      - homepage.description=Jellyfin Media Playback
      - com.centurylinklabs.watchtower.enable=true
    # Traefik filters out unhealthy services
    # healthcheck:
    #   test: ["CMD", "apt", "install", "-y", "curl", "curl", "-f", "http://172.24.32.13:8096/web/index.html"]
    #   start_period: 60s
    #   interval: 300s
    #   timeout: 10s
    #   retries: 5
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

# DOCKER COMPOSE COMMAND REFERENCE
# --------------------------------------------------------------------------
# Start    | docker-compose up -d
# Stop     | docker-compose stop
# Update   | docker-compose pull
# Logs     | docker-compose logs --tail=25 -f
# Terminal | docker-compose exec photoprism bash
# Help     | docker-compose exec photoprism photoprism help
# Config   | docker-compose exec photoprism photoprism config
# Reset    | docker-compose exec photoprism photoprism reset
# Backup   | docker-compose exec photoprism photoprism backup -a -i
# Restore  | docker-compose exec photoprism photoprism restore -a -i
# Index    | docker-compose exec photoprism photoprism index
# Reindex  | docker-compose exec photoprism photoprism index -f
# Import   | docker-compose exec photoprism photoprism import
#
# To search originals for faces without a complete rescan:
# docker-compose exec photoprism photoprism faces index
#
# All commands may have to be prefixed with "sudo" when not running as root.
# This will point the home directory placeholder ~ to /root in volume mounts.

  photoprism:
    ## Use photoprism/photoprism:preview for testing preview builds:
    image: photoprism/photoprism:latest
    networks:
      - traefik_proxy
      - photoprism
    depends_on:
      photoprism_mariadb:
          condition: service_started
    ## Only enable automatic restarts once your installation is properly
    ## configured as it otherwise may get stuck in a restart loop,
    ## see https://docs.photoprism.org/getting-started/faq/#why-is-photoprism-getting-stuck-in-a-restart-loop
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ## Run as a specific, non-root user (see https://docs.docker.com/engine/reference/run/#user):
    # user: "1000:1000"
    env_file:
      - .photoprism.env
    ## Hardware devices for video transcoding and machine learning (optional):
    # devices:
    #  - "/dev/video11:/dev/video11" # Video4Linux (h264_v4l2m2m)
    #  - "/dev/dri/renderD128:/dev/dri/renderD128" # Intel GPU
    #  - "/dev/dri/card0:/dev/dri/card0"
    working_dir: "/photoprism"
    volumes:
      - photoprism_pictures:/photoprism/originals"
      - "photoprism_storage:/photoprism/storage"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2342"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.photos-http.entrypoints=web
      - traefik.http.routers.photos-http.rule=Host(`photos.viewpoint.house`)
      - traefik.http.routers.photos-http.middlewares=photos-https
      - traefik.http.middlewares.photos-https.redirectscheme.scheme=https
      - traefik.http.routers.photos.rule=Host(`photos.viewpoint.house`)
      - traefik.http.routers.photos.entrypoints=websecure
      - traefik.http.routers.photos.tls=true
      - traefik.http.routers.photos.tls.certresolver=letsencrypt
      - traefik.http.routers.photos.tls.domains[0].main=photos.viewpoint.house
      - traefik.http.services.photos.loadbalancer.server.port=2342
      - traefik.http.services.photos.loadbalancer.healthcheck.path=/
      - traefik.http.services.photos.loadbalancer.healthcheck.port=2342
      - homepage.group=Media
      - homepage.name=Photoprism
      - homepage.icon=mdi-camera
      - homepage.href=https://photos.viewpoint.house
      - homepage.description=PhotoPrism Photo Album
      - com.centurylinklabs.watchtower.enable=true

  ## Database Server (recommended)
  ## see https://docs.photoprism.org/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
  photoprism_mariadb:
    restart: unless-stopped
    image: mariadb:10.6
    networks:
      - photoprism
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    volumes:
      - "photoprism_db:/var/lib/mysql" # Never remove
    environment:
      - MYSQL_ROOT_PASSWORD=${PHOTOPRISM_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${PHOTOPRISM_MYSQL_DATABASE}
      - MYSQL_USER=${PHOTOPRISM_MYSQL_USER}
      - MYSQL_PASSWORD=${PHOTOPRISM_MYSQL_PASSWORD}
    # healthcheck:
    #   test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
    #   start_period: 10s
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    labels:
      - com.centurylinklabs.watchtower.enable=true

  # immich-server:
  #   container_name: immich_server
  #   image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
  #   # extends:
  #   #   file: hwaccel.transcoding.yml
  #   #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
  #   volumes:
  #     # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
  #     - ${UPLOAD_LOCATION}:/usr/src/app/upload
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - immich.env
  #   ports:
  #     - '2283:2283'
  #   depends_on:
  #     - immich-redis
  #     - immich-database
  #   restart: always
  #   healthcheck:
  #     disable: false

  # immich-machine-learning:
  #   container_name: immich_machine_learning
  #   # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
  #   # Example tag: ${IMMICH_VERSION:-release}-cuda
  #   image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
  #   # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
  #   #   file: hwaccel.ml.yml
  #   #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
  #   volumes:
  #     - model-cache:/cache
  #   env_file:
  #     - immich.env
  #   restart: always
  #   healthcheck:
  #     disable: false

  # immich-redis:
  #   container_name: immich_redis
  #   image: docker.io/valkey/valkey:8-bookworm@sha256:fec42f399876eb6faf9e008570597741c87ff7662a54185593e74b09ce83d177
  #   healthcheck:
  #     test: redis-cli ping || exit 1
  #   restart: always

  # immich-database:
  #   container_name: immich_postgres
  #   image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0
  #   env_file:
  #     - immich.env
  #   # environment:
  #   #   POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   #   POSTGRES_USER: ${DB_USERNAME}
  #   #   POSTGRES_DB: ${DB_DATABASE_NAME}
  #   #   POSTGRES_INITDB_ARGS: '--data-checksums'
  #   #   # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
  #   #   # DB_STORAGE_TYPE: 'HDD'
  #   volumes:
  #     # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
  #     - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
  #   restart: always

  paperless_broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    networks:
      - paperless
    volumes:
      - paperless_redisdata:/data
    labels:
      - com.centurylinklabs.watchtower.enable=true

  paperless_db:
    image: docker.io/library/mariadb:10
    restart: unless-stopped
    networks:
      - paperless
    volumes:
      - paperless_dbdata:/var/lib/mysql
    env_file:
      - .paperless.env
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - com.centurylinklabs.watchtower.enable=true

  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    depends_on:
      paperless_broker:
          condition: service_started
      paperless_db:
          condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    env_file:
      - .paperless.env
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
    restart: unless-stopped
    networks:
      - traefik_proxy
      - paperless
    labels:
      - traefik.enable=true
      - traefick.docker.network=frontend_traefik_proxy
      - traefik.http.routers.paperless.rule=Host(`paperless.viewpoint.house`)
      - traefik.http.routers.paperless.entrypoints=websecure
      - traefik.http.routers.paperless.tls=true
      - traefik.http.routers.paperless.tls.certresolver=letsencrypt
      - traefik.http.routers.paperless.tls.domains[0].main=paperless.viewpoint.house
      - traefik.http.services.paperless.loadbalancer.server.port=8000
      # - traefik.http.routers.paperless.middlewares=authelia@docker
      - homepage.group=Media
      - homepage.icon=mdi-book-open-outline
      - homepage.name=Paperless
      - homepage.href=https://paperless.viewpoint.house
      - homepage.description=Paperless
      - com.centurylinklabs.watchtower.enable=true

  # homebox:
  #   image: ghcr.io/hay-kot/homebox:latest
  #   container_name: homebox
  #   environment:
  #     - TZ=Europe/London
  #   volumes:
  #     - homebox_data:/data
  #   networks:
  #     - traefik_proxy
  #   healthcheck:
  #     # test: ["CMD", "curl", "-f", "http://localhost:7745"]
  #     test: "wget --no-verbose --tries=1 --spider http://localhost:7745 || exit 1"
  #     start_period: 15s
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.homebox-http.entrypoints=web
  #     - traefik.http.routers.homebox-http.rule=Host(`parts.viewpoint.house`)
  #     - traefik.http.routers.homebox-http.middlewares=homebox-https
  #     - traefik.http.middlewares.homebox-https.redirectscheme.scheme=https
  #     - traefik.http.routers.homebox.rule=Host(`parts.viewpoint.house`)
  #     - traefik.http.routers.homebox.entrypoints=websecure
  #     - traefik.http.routers.homebox.tls=true
  #     - traefik.http.routers.homebox.tls.certresolver=letsencrypt
  #     - traefik.http.routers.homebox.tls.domains[0].main=parts.viewpoint.house
  #     - traefik.http.services.homebox.loadbalancer.server.port=7745
  #     - traefik.http.services.homebox.loadbalancer.healthcheck.port=7745
  #     - traefik.http.services.homebox.loadbalancer.healthcheck.path=/
  #     - homepage.group=Media
  #     - homepage.icon=mdi-book-open-outline
  #     - homepage.name=Parts
  #     - homepage.href=https://parts.viewpoint.house
  #     - homepage.description=Parts Management
  #     - com.centurylinklabs.watchtower.enable=true
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

  tdarr:
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    restart: unless-stopped
    network_mode: bridge
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
    environment:
      - TZ=Europe/London
      - PUID=${TDARR_PUID}
      - PGID=${TDARR_PGID}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - nodeName=MyInternalNode
    volumes:
      - tdarr_server:/app/server
      - tdarr_configs:/app/configs
      - tdarr_logs:/app/logs
      - /media/store/test:/media
      - /media/store/transcode_cache:/temp
    labels:
      - traefik.enable=true
      - traefik.http.routers.tdarr-http.entrypoints=web
      - traefik.http.routers.tdarr-http.rule=Host(`tdarr.viewpoint.house`)
      - traefik.http.routers.tdarr-http.middlewares=tdarr-https
      - traefik.http.middlewares.tdarr-https.redirectscheme.scheme=https
      - traefik.http.routers.tdarr.rule=Host(`tdarr.viewpoint.house`)
      - traefik.http.routers.tdarr.entrypoints=websecure
      - traefik.http.routers.tdarr.tls=true
      - traefik.http.routers.tdarr.tls.certresolver=letsencrypt
      - traefik.http.routers.tdarr.tls.domains[0].main=tdarr.viewpoint.house
      - traefik.http.services.tdarr.loadbalancer.server.port=8265
      - traefik.http.services.tdarr.loadbalancer.healthcheck.port=8265
      - traefik.http.services.tdarr.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-movie-open-outline
      - homepage.name=Tdarr
      - homepage.href=https://tdarr.viewpoint.house
      - homepage.description=Tdarr Transcoding
      - com.centurylinklabs.watchtower.enable=true

  tdarr-node:
    container_name: tdarr-node
    image: ghcr.io/haveagitgat/tdarr_node:latest
    restart: unless-stopped
    network_mode: service:tdarr
    environment:
      - TZ=Europe/London
      - PUID=${TDARR_PUID}
      - PGID=${TDARR_PGID}
      - UMASK_SET=002
      - nodeName=MyExternalNode
      - serverIP=0.0.0.0
      - serverPort=8266
      - inContainer=true
    volumes:
      - tdarr_configs:/app/configs
      - tdarr_logs:/app/logs
      - /media/store/test:/media
      - /media/store/transcode_cache:/temp
    labels:
      - com.centurylinklabs.watchtower.enable=true

volumes:

  homebox_data:
  immich-model-cache:
  recyclarr_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/recyclarr/config/"

  nzbget_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/nzbget/config/"

  nzbget_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/nzbget/data/"

  downloads_complete:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/downloads/"
      device: ":/media/Tank/Downloads/"

  downloads_tmp:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/downloads/tmp/"
      device: ":/media/Tank/Downloads/tmp/"

  downloads_intermediate:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/downloads/nzbs/intermediate/"
      device: ":/media/Tank/Downloads/nzbs/intermediate/"

  music-assistant:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/music-assistant/"

  radarr_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw,sync,rsize=0,wsize=0
      device: ":/srv/nfs4/docker_nfs/radarr/config/"

  sonarr_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw,sync,rsize=0,wsize=0
      device: ":/srv/nfs4/docker_nfs/sonarr/config/"

  nzbhydra_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/nzbhydra/config/"

  nzbhydra_downloads:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/nzbhydra/downloads/"

  ebooks:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/ebooks/"
      device: ":/media/Tank/Books/ebooks/"

  ebooks_import:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/ebooks_import/"
      device: ":/media/Tank/Books/ebooks_import/"

  audiobooks:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/Audio Books"
      device: ":/media/Tank/Books/Audio Books/"

  tdarr_server:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/tdarr/server/"

  tdarr_configs:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/tdarr/configs/"

  tdarr_logs:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/tdarr/logs/"

  paperless_redisdata:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/paperless/redis/data/"

  paperless_dbdata:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/paperless/db/data/"

  paperless_media:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/paperless/media/"

  paperless_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/paperless/data/"

  nginx_core_conf:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/nginx_core/conf/"

  nginx_core_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/nginx_core/html"

  readarr:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/readarr/"

  miniflux-db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/miniflux/db/"

  photoprism_db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/photoprism/db/"
  photoprism_storage:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/photoprism/storage/"
  photoprism_pictures:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/media/Tank/Home/Pictures"
      device: ":/srv/nfs4/home/Pictures/"

  complete:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/downloads/"
      device: ":/media/Tank/Downloads/"

  tv:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/tv/"
      device: ":/media/Tank/TV/"

  movies:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      # device: ":/srv/nfs4/store/movies/"
      device: ":/media/Tank/Movies/"

  music:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/media/Tank/Music/"

  podcasts:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/podcasts/"

  music_playlists:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/music_playlists/"

  calibre_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/calibre/config/"

  jellyfin_config:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/jellyfin/config/"

  jellyfin_cache:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/docker_nfs/jellyfin/cache/"

networks:
    traefik_proxy:
      external: true
      name: frontend_traefik_proxy
    photoprism:
      # driver: overlay
      # driver: bridge
    miniflux:
      # driver: overlay
      # driver: bridge
    # ombi_network:
    #   name: ombi_network
    paperless:
      name: paperless
      # driver: overlay
    recyclarr:
      name: recyclarr
