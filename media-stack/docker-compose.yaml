version: '3.4'

# https://github.com/HaoZeke/starDock_compose/blob/master/docker-compose.yml
# https://www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/#Traefik_Docker_Compose_Examples
#

services:

  traefik:
    image: "traefik:v2.7"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:90"
    ports:
      - "90:90"
      - "8090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   volumes:
  #     - /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
  #     - /docker/nginx/www/:/var/www
  #     - /docker/nginx/logs:/logs
  #   ports:
  #     - 88:80
  #     - 8443:443
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.frigate.rule=Host(`web.viewpoint.house`)"
  #     - "traefik.http.routers.frigate.entrypoints=web"
  #     - flame.type=application # "app" works too
  #     - flame.name=Nginx (88)
  #     - flame.url=http://viewpoint.house:88

  ## Deploy this later, when ready
  # piwigo:
  #   image: lscr.io/linuxserver/piwigo
  #   container_name: piwigo
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - </path/to/appdata/config>:/config
  #     - </path/to/appdata/gallery>:/gallery
  #   ports:
  #     - 80:80
  #   restart: unless-stopped

  nzbget:
    image: linuxserver/nzbget:latest
    container_name: nzbget
    restart: unless-stopped
    environment:
      - NZBGET_TRACK=stable
      - PUID=200
      - PGID=200
    ports:
      - 0.0.0.0:6789:6789
    volumes:
      - /docker/nzbget/config:/config
      - /docker/nzbget/data:/downloads
      - /media/store/downloads/nzbs/intermediate:/intermediate
      - /media/store/downloads:/complete
      - /media/store/downloads/tmp:/downloads/tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.viewpoint.house`)"
      - "traefik.http.routers.nzbget.entrypoints=web"
      - flame.type=application # "app" works too
      - flame.name=NZBGet
      - flame.url=http://viewpoint.house:6789

  sonarr:
    image: linuxserver/sonarr:preview
    container_name: sonarr
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://viewpoint.house:8989"]
      start_period: 60s 
      interval: 30s 
      timeout: 10s
      retries: 5
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`tv.viewpoint.house`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.services.sonarr.loadbalancer.healthcheck.port=8989"
      - flame.type=application # "app" works too
      - flame.name=Sonarr
      - flame.url=http://viewpoint.house:8989
      - flame.icon=television
    environment:
      - PUID=200
      - PGID=200
    ports:
      - 8989:8989
#    expose:
#      - 8989
    volumes:
      - /docker/sonarr/config:/config
      - complete:/complete
      - complete:/downloads/complete
      - tv:/tv
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    healthcheck:
      test: ["CMD", "curl", "-f", "http://viewpoint.house:7878"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`movies.viewpoint.house`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      - flame.type=application # "app" works too
      - flame.name=Radarr
      - flame.url=http://viewpoint.house:7878
      - flame.icon=movie-open-outline
    environment:
      - PUID=200
      - PGID=200
    ports:
      - 7878:7878
#    expose:
#      - 7878
    volumes:
      - /docker/radarr/config:/config
      - complete:/complete
      - movies:/movies
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  hydra:
    image: linuxserver/hydra:latest
    container_name: hydra
    restart: unless-stopped
    environment:
      - PUID=200
      - PGID=200
    ports:
      - 5075:5075
    healthcheck:
      test: ["CMD", "curl", "-f", "http://viewpoint.house:5075"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hydra.rule=Host(`hydra.viewpoint.house`)"
      - "traefik.http.routers.hydra.entrypoints=web"
      - flame.type=application # "app" works too
      - flame.name=Hydra
      - flame.url=http://viewpoint.house:5075
    volumes:
      - /docker/nzbhydra/config:/config
      - /docker/nzbhydra/downloads:/downloads/
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

#  lidarr:
#    image: linuxserver/lidarr
#    container_name: lidarr
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - TZ=Europe/London
#      - UMASK_SET=022 #optional
#    volumes:
#      - </path/to/appdata/config>:/config
#      - </path/to/music>:/music
#      - </path/to/downloads>:/downloads
#    ports:
#      - 8686:8686
#    restart: unless-stopped

  lazylibrarian:
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    healthcheck:
      test: ["CMD", "curl", "-f", "http://viewpoint.house:5299/home"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - traefik_proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.books.rule=Host(`books.viewpoint.house`)"
      - "traefik.http.routers.books.entrypoints=web"
      - flame.type=application # "app" works too
      - flame.name=LazyLibrarian
      - flame.url=http://viewpoint.house:5299
      - flame.icon=book-open-outline
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
    volumes:
      - /docker/lazylibrarian/config:/config
      - complete:/downloads
      - /media/store/ebooks:/ebooks
      - /media/store/Audio Books:/audiobooks
      - /media/store/home/bagpuss/Arduino_Books:/alternate
    ports:
      - 5299:5299
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    #user: 1000:1000
    network_mode: host
    restart: unless-stopped
    volumes:
      - /docker/jellyfin/config:/config
      - /docker/jellyfin/cache:/cache
      - tv:/media/tv
      - movies:/media/movies
      - music:/media/music
      - /media/store/ebooks:/ebooks
      - /media/store/Audio Books:/audiobooks
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.viewpoint.house`)"
      - "traefik.http.routers.jellyfin.entrypoints=web"
      - flame.type=application # "app" works too
      - flame.name=Jellyfin
      - flame.url=http://viewpoint.house:8096
      - flame.icon=play-network-outline
    healthcheck:
      test: ["CMD", "apt", "install", "-y", "curl", "curl", "-f", "http://viewpoint.house:8096/web/index.html"]
      start_period: 60s
      interval: 300s
      timeout: 10s
      retries: 5
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

# DOCKER COMPOSE COMMAND REFERENCE
# --------------------------------------------------------------------------
# Start    | docker-compose up -d
# Stop     | docker-compose stop
# Update   | docker-compose pull
# Logs     | docker-compose logs --tail=25 -f
# Terminal | docker-compose exec photoprism bash
# Help     | docker-compose exec photoprism photoprism help
# Config   | docker-compose exec photoprism photoprism config
# Reset    | docker-compose exec photoprism photoprism reset
# Backup   | docker-compose exec photoprism photoprism backup -a -i
# Restore  | docker-compose exec photoprism photoprism restore -a -i
# Index    | docker-compose exec photoprism photoprism index
# Reindex  | docker-compose exec photoprism photoprism index -f
# Import   | docker-compose exec photoprism photoprism import
#
# To search originals for faces without a complete rescan:
# docker-compose exec photoprism photoprism faces index
#
# All commands may have to be prefixed with "sudo" when not running as root.
# This will point the home directory placeholder ~ to /root in volume mounts.

  photoprism:
    ## Use photoprism/photoprism:preview for testing preview builds:
    image: photoprism/photoprism:latest
    depends_on:
      - photoprism_mariadb
    ## Only enable automatic restarts once your installation is properly
    ## configured as it otherwise may get stuck in a restart loop,
    ## see https://docs.photoprism.org/getting-started/faq/#why-is-photoprism-getting-stuck-in-a-restart-loop
    # restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ## Run as a specific, non-root user (see https://docs.docker.com/engine/reference/run/#user):
    # user: "1000:1000"
    ports:
      - "2342:2342" # HTTP port (host:container)
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: "insecure"          # PLEASE CHANGE: Your initial admin password (min 4 characters)
      PHOTOPRISM_SITE_URL: "http://localhost:2342/"  # Public server URL incl http:// or https:// and /path, :port is optional
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # File size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # Improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "false"                      # Run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "false"                     # No authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false"                   # Don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # Enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # Disables storage permission updates on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # Disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # Disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # Disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # Disables facial recognition
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # Disables image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false"          # Enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "false"                # Flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # Allow uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # Use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "photoprism_mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: "insecure"       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
      PHOTOPRISM_SITE_DESCRIPTION: ""
      PHOTOPRISM_SITE_AUTHOR: ""
      ## Set a non-root user, group, or custom umask if your Docker environment doesn't support this natively:
      # PHOTOPRISM_UID: 1000
      # PHOTOPRISM_GID: 1000
      # PHOTOPRISM_UMASK: 0000
      ## Enable TensorFlow AVX2 support for modern Intel CPUs (requires starting the container as root):
      # PHOTOPRISM_INIT: "tensorflow-amd64-avx2"
      ## Hardware video transcoding config (optional):
      # PHOTOPRISM_FFMPEG_BUFFERS: "64"              # FFmpeg capture buffers (default: 32)
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      # PHOTOPRISM_FFMPEG_ENCODER: "h264_v4l2m2m"    # Use Video4Linux for AVC transcoding (default: libx264)
      # PHOTOPRISM_FFMPEG_ENCODER: "h264_qsv"        # Use Intel Quick Sync Video for AVC transcoding (default: libx264)
      # PHOTOPRISM_INIT: "intel-graphics tensorflow-amd64-avx2" # Enable TensorFlow AVX2 & Intel Graphics support
      HOME: "/photoprism"
    ## Hardware devices for video transcoding and machine learning (optional):
    # devices:
    #  - "/dev/video11:/dev/video11" # Video4Linux (h264_v4l2m2m)
    #  - "/dev/dri/renderD128:/dev/dri/renderD128" # Intel GPU
    #  - "/dev/dri/card0:/dev/dri/card0"
    working_dir: "/photoprism"
    volumes:
      ## The *originals* folder contains your original photo and video files (- "[host folder]:/photoprism/originals"):
      - "/media/store/home/Pictures:/photoprism/originals"
      ## Multiple folders can be made accessible by mounting them as subfolders of /photoprism/originals:
      # - "/mnt/Family:/photoprism/originals/Family"    # [folder 1]:/photoprism/originals/[folder 1]
      # - "/mnt/Friends:/photoprism/originals/Friends"  # [folder 2]:/photoprism/originals/[folder 2]
      ## You may mount an *import* folder from which files can be transferred to *originals* (optional):
      # - "~/Import:/photoprism/import"
      ## Cache, session, thumbnail, and sidecar files will be created in the *storage* folder (never remove):
      - "photoprism_storage:/photoprism/storage"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.photos.rule=Host(`photos.viewpoint.house`)"
      - "traefik.http.routers.photos.entrypoints=web"
      - flame.type=application # "app" works too
      - flame.name=Photoprism
      - flame.url=http://viewpoint.house:2342
      - flame.icon=picture


  ## Database Server (recommended)
  ## see https://docs.photoprism.org/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
  photoprism_mariadb:
    restart: unless-stopped
    image: mariadb:10.6
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    volumes:
      - "photoprism_db:/var/lib/mysql" # Never remove
    environment:
      MYSQL_ROOT_PASSWORD: insecure
      MYSQL_DATABASE: photoprism
      MYSQL_USER: photoprism
      MYSQL_PASSWORD: insecure

volumes:

  photoprism_db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/photoprism/db/"
  photoprism_storage:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/photoprism/storage/"
  complete:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/downloads/"

  tv:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/tv/"

  movies:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/movies/"

  music:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/music/"

  podcasts:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/podcasts/"

  music_playlists:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/music_playlists/"


networks:
    traefik_proxy:
      driver: bridge
