version: '3.6'

# https://github.com/HaoZeke/starDock_compose/blob/master/docker-compose.yml
# https://www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/#Traefik_Docker_Compose_Examples
#

services:
  nginx_core:
    image: nginx:latest
    container_name: nginx_core
    restart: unless-stopped
    volumes:
      - nginx_core_conf:/etc/nginx
      - nginx_core_data:/var/www
      # - /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      # - /docker/nginx/www/:/var/www
      # - /docker/nginx/logs:/logs
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx_core.rule=Host(`core.vpn.glasgownet.com`)
      - traefik.http.routers.nginx_core.entrypoints=web
      - traefik.http.routers.nginx_core-https.rule=Host(`core.viewpoint.house`)
      - traefik.http.routers.nginx_core-https.entrypoints=websecure
      - traefik.http.routers.nginx_core-https.tls=true
      - traefik.http.routers.nginx_core-https.tls.certresolver=letsencrypt
      - traefik.http.routers.nginx_core-https.tls.domains[0].main=core.viewpoint.house
      - homepage.group=Management
      - homepage.name=Core Web
      - homepage.href=https://core.viewpoint.house
      - homepage.description=Core Web Files
      - com.centurylinklabs.watchtower.enable=true

  ## Deploy this later, when ready
  # piwigo:
  #   image: lscr.io/linuxserver/piwigo
  #   container_name: piwigo
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - </path/to/appdata/config>:/config
  #     - </path/to/appdata/gallery>:/gallery
  #   ports:
  #     - 80:80
  #   restart: unless-stopped

  miniflux:
    image: miniflux/miniflux:latest
    depends_on:
      miniflux_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${MINIFLUX_DATABASE_URL}
      - RUN_MIGRATIONS=${MINIFLUX_RUN_MIGRATIONS}
      - CREATE_ADMIN=${MINIFLUX_CREATE_ADMIN}
      - ADMIN_USERNAME=${MINIFLUX_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${MINIFLUX_ADMIN_PASSWORD}
    restart: unless-stopped
    networks:
      - traefik_proxy
      - miniflux
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.miniflux-http.entrypoints=web
      - traefik.http.routers.miniflux-http.rule=Host(`news.viewpoint.house`)
      - traefik.http.routers.miniflux-http.middlewares=miniflux-https
      - traefik.http.middlewares.miniflux-https.redirectscheme.scheme=https
      - traefik.http.routers.miniflux.rule=Host(`news.viewpoint.house`)
      - traefik.http.routers.miniflux.entrypoints=websecure
      - traefik.http.routers.miniflux.tls=true
      - traefik.http.routers.miniflux.tls.certresolver=letsencrypt
      - traefik.http.routers.miniflux.tls.domains[0].main=news.viewpoint.house
      - traefik.http.services.miniflux.loadbalancer.server.port=8080
      # - traefik.http.services.miniflux.loadbalancer.healthcheck.port=8080
      # - traefik.http.services.miniflux.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-newspaper
      - homepage.name=Miniflux News
      - homepage.href=http://news.viewpoint.house
      - homepage.description=News RSS Aggegrator
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]

  miniflux_db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${MINIFLUX_POSTGRES_USER}
      - POSTGRES_PASSWORD=${MINIFLUX_POSTGRES_SECRET}
    restart: unless-stopped
    networks:
      - miniflux
    volumes:
      - miniflux-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s
      start_period: 30s
    labels:
      - com.centurylinklabs.watchtower.enable=true

# # https://docs.ombi.app/settings/all-the-arrs/
#   ombi:
#     image: ghcr.io/linuxserver/ombi:latest
#     container_name: ombi
#     restart: unless-stopped
#     networks:
#       - traefik_proxy
#       - ombi_network
#     environment:
#       - PUID=1000
#       - PGID=1000
#       - TZ=Europe/London
#     volumes:
#       - /docker/ombi/config:/config
#     # ports:
#     #   - "5002:3579"
#     depends_on:
#       - "ombi_mysql_db"
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=frontend_traefik_proxy
#       - traefik.http.routers.ombi.rule=Host(`ombi.viewpoint.house`)
#       - traefik.http.routers.ombi.entrypoints=websecure
#       - traefik.http.routers.ombi.tls=true
#       - traefik.http.routers.ombi.tls.certresolver=letsencrypt
#       - traefik.http.routers.ombi.tls.domains[0].main=ombi.viewpoint.house
#       - traefik.http.services.ombi.loadbalancer.server.port=3579
#       - com.centurylinklabs.watchtower.enable=true

#   ombi_mysql_db:
#     image: "mysql:5.7"
#     container_name: ombi_mysql
#     restart: unless-stopped
#     networks:
#       - ombi_network
#     environment:
#       - MYSQL_ROOT_PASSWORD=${OMBI_MYSQL_ROOT_PASSWORD}
#     volumes:
#       -  /docker/ombi/mysql:/var/lib/mysql
#     labels:
#       - com.centurylinklabs.watchtower.enable=true

#   ombi_phpmyadmin:
#       image: phpmyadmin/phpmyadmin
#       container_name: ombi_phpmyadmin
#       restart: unless-stopped
#       networks:
#         - ombi_network
#         - traefik_proxy
#       environment:
#         PMA_HOST: ombi_mysql_db
#       # ports:
#       #   - '8084:80'
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=frontend_traefik_proxy
#         - traefik.http.routers.ombidb.rule=Host(`ombidb.viewpoint.house`)
#         - traefik.http.routers.ombidb.entrypoints=websecure
#         - traefik.http.routers.ombidb.tls=true
#         - traefik.http.routers.ombidb.tls.certresolver=letsencrypt
#         - traefik.http.routers.ombidb.tls.domains[0].main=ombidb.viewpoint.house
#         - traefik.http.services.ombidb.loadbalancer.server.port=80
#         - com.centurylinklabs.watchtower.enable=true
#       depends_on:
#         - "ombi_mysql_db"

  nzbget:
    image: linuxserver/nzbget:latest
    container_name: nzbget
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - NZBGET_TRACK=stable
      - PUID=200
      - PGID=200
    volumes:
      - /docker/nzbget/config:/config
      - /docker/nzbget/data:/downloads
      - /media/store/downloads/nzbs/intermediate:/intermediate
      - /media/store/downloads:/complete
      - /media/store/downloads/tmp:/downloads/tmp
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget-http.entrypoints=web
      - traefik.http.routers.nzbget-http.rule=Host(`nzbget.viewpoint.house`)
      - traefik.http.routers.nzbget-http.middlewares=nzbget-https
      - traefik.http.middlewares.nzbget-https.redirectscheme.scheme=https
      - traefik.http.routers.nzbget.rule=Host(`nzbget.viewpoint.house`)
      - traefik.http.routers.nzbget.entrypoints=websecure
      - traefik.http.routers.nzbget.tls=true
      - traefik.http.routers.nzbget.tls.certresolver=letsencrypt
      - traefik.http.routers.nzbget.tls.domains[0].main=nzbget.viewpoint.house
      # - traefik.http.services.nzbget.loadbalancer.server.port=6789
      # - traefik.http.services.nzbget.loadbalancer.healthcheck.port=6789
      # - traefik.http.services.nzbget.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.name=NZBGet
      - homepage.icon=mdi-cloud-download
      - homepage.href=https://nzbget.viewpoint.house
      - homepage.description=Usenet Downloader
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6789"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr-http.entrypoints=web
      - traefik.http.routers.sonarr-http.rule=Host(`tv.viewpoint.house`)
      - traefik.http.routers.sonarr-http.middlewares=sonarr-https
      - traefik.http.middlewares.sonarr-https.redirectscheme.scheme=https
      - traefik.http.routers.sonarr.rule=Host(`tv.viewpoint.house`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=letsencrypt
      - traefik.http.routers.sonarr.tls.domains[0].main=tv.viewpoint.house
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.http.services.sonarr.loadbalancer.healthcheck.port=8989
      - traefik.http.services.sonarr.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-television
      - homepage.name=Sonarr
      - homepage.href=https://tv.viewpoint.house
      - homepage.description=TV Show Mangement
      - com.centurylinklabs.watchtower.enable=true
    environment:
      - PUID=200
      - PGID=200
    volumes:
      - /docker/sonarr/config:/config
      - complete:/complete
      - complete:/downloads/complete
      - tv:/tv
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr-http.entrypoints=web
      - traefik.http.routers.radarr-http.rule=Host(`movies.viewpoint.house`)
      - traefik.http.routers.radarr-http.middlewares=radarr-https
      - traefik.http.middlewares.radarr-https.redirectscheme.scheme=https
      - traefik.http.routers.radarr.rule=Host(`movies.viewpoint.house`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=letsencrypt
      - traefik.http.routers.radarr.tls.domains[0].main=movies.viewpoint.house
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - traefik.http.services.radarr.loadbalancer.healthcheck.port=7878
      - traefik.http.services.radarr.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=mdi-movie-open-outline
      - homepage.href=https://movies.viewpoint.house
      - homepage.description=Movie Management
      - com.centurylinklabs.watchtower.enable=true
    environment:
      - PUID=200
      - PGID=200
    volumes:
      - /docker/radarr/config:/config
      - complete:/complete
      - movies:/movies
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  hydra:
    image: linuxserver/nzbhydra2:latest
    container_name: hydra
    restart: unless-stopped
    environment:
      - PUID=200
      - PGID=200
    networks:
      - traefik_proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5076"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.http.routers.hydra-http.entrypoints=web
      - traefik.http.routers.hydra-http.rule=Host(`hydra.viewpoint.house`)
      - traefik.http.routers.hydra-http.middlewares=hydra-https
      - traefik.http.middlewares.hydra-https.redirectscheme.scheme=https
      - traefik.http.routers.hydra.rule=Host(`hydra.viewpoint.house`)
      - traefik.http.routers.hydra.entrypoints=websecure
      - traefik.http.routers.hydra.tls=true
      - traefik.http.routers.hydra.tls.certresolver=letsencrypt
      - traefik.http.routers.hydra.tls.domains[0].main=hydra.viewpoint.house
      - traefik.http.services.hydra.loadbalancer.server.port=5076
      - traefik.http.services.hydra.loadbalancer.healthcheck.port=5076
      - traefik.http.services.hydra.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.name=Hydra Usenet Index Meta-Search
      - homepage.href=https://hydra.viewpoint.house
      - homepage.description=Hydra Indexer
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - /docker/nzbhydra/config:/config
      - /docker/nzbhydra/downloads:/downloads/
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

#  lidarr:
#    image: linuxserver/lidarr
#    container_name: lidarr
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - TZ=Europe/London
#      - UMASK_SET=022 #optional
#    volumes:
#      - </path/to/appdata/config>:/config
#      - </path/to/music>:/music
#      - </path/to/downloads>:/downloads
#    ports:
#      - 8686:8686
#    restart: unless-stopped

  # lazylibrarian:
  #   image: linuxserver/lazylibrarian:latest
  #   container_name: lazylibrarian
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5299/home"]
  #     start_period: 60s
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - traefik_proxy
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.lazy.rule=Host(`lazy.viewpoint.house`)
  #     - traefik.http.routers.lazy.entrypoints=web
  #     - com.centurylinklabs.watchtower.enable=true
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #     - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
  #   volumes:
  #     - /docker/lazylibrarian/config:/config
  #     - complete:/downloads
  #     - /media/store/ebooks:/ebooks
  #     - /media/store/Audio Books:/audiobooks
  #     - /media/store/home/bagpuss/Arduino_Books:/alternate
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - readarr:/config
      - complete:/downloads
      - /media/store/ebooks:/books
      - /media/store/Audio Books:/audiobooks
      # - /media/store/home/bagpuss/Arduino_Books:/alternate
    networks:
      - traefik_proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8787"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr-http.entrypoints=web
      - traefik.http.routers.readarr-http.rule=Host(`books.viewpoint.house`)
      - traefik.http.routers.readarr-http.middlewares=readarr-https
      - traefik.http.middlewares.readarr-https.redirectscheme.scheme=https
      - traefik.http.routers.books.rule=Host(`books.viewpoint.house`)
      - traefik.http.routers.books.entrypoints=websecure
      - traefik.http.routers.books.tls=true
      - traefik.http.routers.books.tls.certresolver=letsencrypt
      - traefik.http.routers.books.tls.domains[0].main=books.viewpoint.house
      - traefik.http.services.books.loadbalancer.server.port=8787
      - traefik.http.services.books.loadbalancer.healthcheck.port=8787
      - traefik.http.services.books.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-book-open-outline
      - homepage.name=Readarr Books
      - homepage.href=https://books.viewpoint.house
      - homepage.description=Books Management
      - com.centurylinklabs.watchtower.enable=true
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  # jellyfin:
  #   image: jellyfin/jellyfin:latest
  #   container_name: jellyfin
  #   networks:
  #     - traefik_proxy
  #   restart: unless-stopped
  #   volumes:
  #     - /docker/jellyfin/config:/config
  #     - /docker/jellyfin/cache:/cache
  #     - tv:/media/tv
  #     - movies:/media/movies
  #     - music:/media/music
  #     - /media/store/ebooks:/ebooks
  #     - /media/store/Audio Books:/audiobooks
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.jellyfin-http.entrypoints=web
  #     - traefik.http.routers.jellyfin-http.rule=Host(`jellyfin.viewpoint.house`)
  #     - traefik.http.routers.jellyfin-http.middlewares=jellyfin-https
  #     - traefik.http.middlewares.jellyfin-https.redirectscheme.scheme=https
  #     - traefik.http.routers.jellyfin.rule=Host(`jellyfin.viewpoint.house`)
  #     - traefik.http.routers.jellyfin.entrypoints=websecure
  #     - traefik.http.routers.jellyfin.tls=true
  #     - traefik.http.routers.jellyfin.tls.certresolver=letsencrypt
  #     - traefik.http.routers.jellyfin.tls.domains[0].main=jellyfin.viewpoint.house
  #     - traefik.http.services.jellyfin.loadbalancer.server.port=8096
  #     - traefik.http.services.jellyfin.loadbalancer.healthcheck.port=8096
  #     - traefik.http.services.jellyfin.loadbalancer.healthcheck.path=/
  #     - homepage.group=Media
  #     - homepage.icon=mdi-movie-open-play
  #     - homepage.name=Jellyfin
  #     - homepage.href=https://jellyfin.viewpoint.house
  #     - homepage.description=Jellyfin Media Playback
  #     - com.centurylinklabs.watchtower.enable=true
  #   # Traefik filters out unhealthy services
  #   # healthcheck:
  #   #   test: ["CMD", "apt", "install", "-y", "curl", "curl", "-f", "http://172.24.32.13:8096/web/index.html"]
  #   #   start_period: 60s
  #   #   interval: 300s
  #   #   timeout: 10s
  #   #   retries: 5
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://172.24.32.13:12201"
  #       tag: "{{.Name}}"

# DOCKER COMPOSE COMMAND REFERENCE
# --------------------------------------------------------------------------
# Start    | docker-compose up -d
# Stop     | docker-compose stop
# Update   | docker-compose pull
# Logs     | docker-compose logs --tail=25 -f
# Terminal | docker-compose exec photoprism bash
# Help     | docker-compose exec photoprism photoprism help
# Config   | docker-compose exec photoprism photoprism config
# Reset    | docker-compose exec photoprism photoprism reset
# Backup   | docker-compose exec photoprism photoprism backup -a -i
# Restore  | docker-compose exec photoprism photoprism restore -a -i
# Index    | docker-compose exec photoprism photoprism index
# Reindex  | docker-compose exec photoprism photoprism index -f
# Import   | docker-compose exec photoprism photoprism import
#
# To search originals for faces without a complete rescan:
# docker-compose exec photoprism photoprism faces index
#
# All commands may have to be prefixed with "sudo" when not running as root.
# This will point the home directory placeholder ~ to /root in volume mounts.

  photoprism:
    ## Use photoprism/photoprism:preview for testing preview builds:
    image: photoprism/photoprism:latest
    networks:
      - traefik_proxy
      - photoprism
    depends_on:
      - photoprism_mariadb
    ## Only enable automatic restarts once your installation is properly
    ## configured as it otherwise may get stuck in a restart loop,
    ## see https://docs.photoprism.org/getting-started/faq/#why-is-photoprism-getting-stuck-in-a-restart-loop
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ## Run as a specific, non-root user (see https://docs.docker.com/engine/reference/run/#user):
    # user: "1000:1000"
    environment:
      - PHOTOPRISM_ADMIN_PASSWORD=${PHOTOPRISM_ADMIN_PASSWORD}          # PLEASE CHANGE: Your initial admin password (min 4 characters)
      - PHOTOPRISM_SITE_URL=${PHOTOPRISM_SITE_URL}                      # Public server URL incl http:// or https:// and /path, :port is optional
      - PHOTOPRISM_ORIGINALS_LIMIT=${PHOTOPRISM_ORIGINALS_LIMIT}        # File size limit for originals in MB (increase for high-res video)
      - PHOTOPRISM_HTTP_COMPRESSION=${PHOTOPRISM_HTTP_COMPRESSION}      # Improves transfer speed and bandwidth utilization (none or gzip)
      - PHOTOPRISM_DEBUG=${PHOTOPRISM_DEBUG}                            # Run in debug mode (shows additional log messages)
      - PHOTOPRISM_PUBLIC=${PHOTOPRISM_PUBLIC}                          # No authentication required (disables password protection)
      - PHOTOPRISM_READONLY=${PHOTOPRISM_READONLY}                      # Don't modify originals directory (reduced functionality)
      - PHOTOPRISM_EXPERIMENTAL=${PHOTOPRISM_EXPERIMENTAL}              # Enables experimental features
      - PHOTOPRISM_DISABLE_CHOWN=${PHOTOPRISM_DISABLE_CHOWN}              # Disables storage permission updates on startup
      - PHOTOPRISM_DISABLE_WEBDAV=${PHOTOPRISM_DISABLE_WEBDAV}             # Disables built-in WebDAV server
      - PHOTOPRISM_DISABLE_SETTINGS=${PHOTOPRISM_DISABLE_SETTINGS}           # Disables Settings in Web UI
      - PHOTOPRISM_DISABLE_TENSORFLOW=${PHOTOPRISM_DISABLE_TENSORFLOW}         # Disables all features depending on TensorFlow
      - PHOTOPRISM_DISABLE_FACES=${PHOTOPRISM_DISABLE_FACES}               # Disables facial recognition
      - PHOTOPRISM_DISABLE_CLASSIFICATION=${PHOTOPRISM_DISABLE_CLASSIFICATION}    # Disables image classification
      - PHOTOPRISM_DARKTABLE_PRESETS=${PHOTOPRISM_DARKTABLE_PRESETS}        # Enables Darktable presets and disables concurrent RAW conversion
      - PHOTOPRISM_DETECT_NSFW=${PHOTOPRISM_DETECT_NSFW}                  # Flag photos as private that MAY be offensive (requires TensorFlow)
      - PHOTOPRISM_UPLOAD_NSFW=${PHOTOPRISM_UPLOAD_NSFW}                  # Allow uploads that MAY be offensive
      # - PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      - PHOTOPRISM_DATABASE_DRIVER=${PHOTOPRISM_DATABASE_DRIVER}          # Use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      - PHOTOPRISM_DATABASE_SERVER=${PHOTOPRISM_DATABASE_SERVER}    # MariaDB or MySQL database server (hostname:port)
      - PHOTOPRISM_DATABASE_NAME=${PHOTOPRISM_DATABASE_NAME}    # MariaDB or MySQL database schema name
      - PHOTOPRISM_DATABASE_USER=${PHOTOPRISM_DATABASE_USER}      # MariaDB or MySQL database user name
      - PHOTOPRISM_DATABASE_PASSWORD=${PHOTOPRISM_DATABASE_PASSWORD}    # MariaDB or MySQL database user password
      - PHOTOPRISM_SITE_TITLE=${PHOTOPRISM_SITE_TITLE}
      - PHOTOPRISM_SITE_CAPTION=${PHOTOPRISM_SITE_CAPTION}
      - PHOTOPRISM_SITE_DESCRIPTION=${PHOTOPRISM_SITE_DESCRIPTION}
      - PHOTOPRISM_SITE_AUTHOR=${PHOTOPRISM_SITE_AUTHOR}
      ## Set a non-root user, group, or custom umask if your Docker environment doesn't support this natively:
      # - PHOTOPRISM_UID: 1000
      # - PHOTOPRISM_GID: 1000
      # - PHOTOPRISM_UMASK: 0000
      ## Enable TensorFlow AVX2 support for modern Intel CPUs (requires starting the container as root):
      # - PHOTOPRISM_INIT: "tensorflow-amd64-avx2"
      ## Hardware video transcoding config (optional):
      # - PHOTOPRISM_FFMPEG_BUFFERS: "64"              # FFmpeg capture buffers (default: 32)
      # - PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      # - PHOTOPRISM_FFMPEG_ENCODER: "h264_v4l2m2m"    # Use Video4Linux for AVC transcoding (default: libx264)
      # - PHOTOPRISM_FFMPEG_ENCODER: "h264_qsv"        # Use Intel Quick Sync Video for AVC transcoding (default: libx264)
      # - PHOTOPRISM_INIT: "intel-graphics tensorflow-amd64-avx2" # Enable TensorFlow AVX2 & Intel Graphics support
      - HOME=${PHOTOPRISM_HOME}
    ## Hardware devices for video transcoding and machine learning (optional):
    # devices:
    #  - "/dev/video11:/dev/video11" # Video4Linux (h264_v4l2m2m)
    #  - "/dev/dri/renderD128:/dev/dri/renderD128" # Intel GPU
    #  - "/dev/dri/card0:/dev/dri/card0"
    working_dir: "/photoprism"
    volumes:
      - "/media/store/home/Pictures:/photoprism/originals"
      - "photoprism_storage:/photoprism/storage"
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend_traefik_proxy
      - traefik.http.routers.photos.rule=Host(`photos.viewpoint.house`)
      - traefik.http.routers.photos.entrypoints=websecure
      - traefik.http.routers.photos.tls=true
      - traefik.http.routers.photos.tls.certresolver=letsencrypt
      - traefik.http.routers.photos.tls.domains[0].main=photos.viewpoint.house
      - traefik.http.services.photos.loadbalancer.server.port=2342
      - traefik.http.services.photos.loadbalancer.healthcheck.path=/
      - traefik.http.services.photos.loadbalancer.healthcheck.port=2342
      - homepage.group=Media
      - homepage.name=Photoprism
      - homepage.icon=mdi-camera
      - homepage.href=https://photos.viewpoint.house
      - homepage.description=PhotoPrism Photo Album


  ## Database Server (recommended)
  ## see https://docs.photoprism.org/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
  photoprism_mariadb:
    restart: unless-stopped
    image: mariadb:10.6
    networks:
      - photoprism
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    volumes:
      - "photoprism_db:/var/lib/mysql" # Never remove
    environment:
      - MYSQL_ROOT_PASSWORD=${PHOTOPRISM_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${PHOTOPRISM_MYSQL_DATABASE}
      - MYSQL_USER=${PHOTOPRISM_MYSQL_USER}
      - MYSQL_PASSWORD=${PHOTOPRISM_MYSQL_PASSWORD}

  paperless_broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    networks:
      - paperless
    volumes:
      - paperless_redisdata:/data

  paperless_db:
    image: docker.io/library/mariadb:10
    restart: unless-stopped
    networks:
      - paperless
    volumes:
      - paperless_dbdata:/var/lib/mysql
    environment:
      MARIADB_HOST: ${PAPERLESS_MARIADB_HOST}
      MARIADB_DATABASE: ${PAPERLESS_MARIADB_DATABASE}
      MARIADB_USER: ${PAPERLESS_MARIADB_USER}
      MARIADB_PASSWORD: ${PAPERLESS_MARIADB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${PAPERLESS_MARIADB_ROOT_PASSWORD}

  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    depends_on:
      - paperless_broker
      - paperless_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - PAPERLESS_URL=https://paperless.viewpoint.house
      - PAPERLESS_ALLOWED_HOSTS = paperless.viewpoint.house
      - PAPERLESS_CSRF_TRUSTED_ORIGINS=https://paperless.viewpoint.house
      - PAPERLESS_REDIS=redis://paperless_broker:6379
      - PAPERLESS_DBENGINE=mariadb
      - PAPERLESS_DBHOST=paperless_db
      - PAPERLESS_DBUSER=${PAPERLESS_DBUSER}
      - PAPERLESS_DBPASS=${PAPERLESS_DBPASS}
      - PAPERLESS_DBPORT=3306
      - PAPERLESS_FILENAME_FORMAT={created_year}/{correspondent}/{title}
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
    restart: unless-stopped
    networks:
      - traefik_proxy
      - paperless
    labels:
      - traefik.enable=true
      - traefik.http.routers.paperless.rule=Host(`paperless.viewpoint.house`)
      - traefik.http.routers.paperless.entrypoints=websecure
      - traefik.http.routers.paperless.tls=true
      - traefik.http.routers.paperless.tls.certresolver=letsencrypt
      - traefik.http.routers.paperless.tls.domains[0].main=paperless.viewpoint.house
      - homepage.group=Media
      - homepage.icon=mdi-book-open-outline
      - homepage.name=Paperless
      - homepage.href=https://paperless.viewpoint.house
      - homepage.description=Paperless
      - com.centurylinklabs.watchtower.enable=true

  homebox:
    image: ghcr.io/hay-kot/homebox:latest
    container_name: homebox
    environment:
      - TZ=Europe/London
    volumes:
      - homebox_data:/data
    networks:
      - traefik_proxy
    healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:7745"]
      test: "wget --no-verbose --tries=1 --spider http://localhost:7745 || exit 1"
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.homebox-http.entrypoints=web
      - traefik.http.routers.homebox-http.rule=Host(`parts.viewpoint.house`)
      - traefik.http.routers.homebox-http.middlewares=homebox-https
      - traefik.http.middlewares.homebox-https.redirectscheme.scheme=https
      - traefik.http.routers.homebox.rule=Host(`parts.viewpoint.house`)
      - traefik.http.routers.homebox.entrypoints=websecure
      - traefik.http.routers.homebox.tls=true
      - traefik.http.routers.homebox.tls.certresolver=letsencrypt
      - traefik.http.routers.homebox.tls.domains[0].main=parts.viewpoint.house
      - traefik.http.services.homebox.loadbalancer.server.port=7745
      - traefik.http.services.homebox.loadbalancer.healthcheck.port=7745
      - traefik.http.services.homebox.loadbalancer.healthcheck.path=/
      - homepage.group=Media
      - homepage.icon=mdi-book-open-outline
      - homepage.name=Parts
      - homepage.href=https://parts.viewpoint.house
      - homepage.description=Parts Management
      - com.centurylinklabs.watchtower.enable=true
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  # tdarr:
  #   container_name: tdarr
  #   image: ghcr.io/haveagitgat/tdarr:latest
  #   restart: unless-stopped
  #   network_mode: bridge
  #   ports:
  #     - 8265:8265 # webUI port
  #     - 8266:8266 # server port
  #   environment:
  #     - TZ=Europe/London
  #     - PUID=${TDARR_PUID}
  #     - PGID=${TDARR_PGID}
  #     - UMASK_SET=002
  #     - serverIP=0.0.0.0
  #     - serverPort=8266
  #     - webUIPort=8265
  #     - internalNode=true
  #     - inContainer=true
  #     - nodeName=MyInternalNode
  #   volumes:
  #     - tdarr_server:/app/server
  #     - tdarr_configs:/app/configs
  #     - tdarr_logs:/app/logs
  #     - /media/store/test:/media
  #     # - /transcode_cache:/temp
  #   labels:
  #     - com.centurylinklabs.watchtower.enable=true

  # tdarr-node:
  #   container_name: tdarr-node
  #   image: ghcr.io/haveagitgat/tdarr_node:latest
  #   restart: unless-stopped
  #   network_mode: service:tdarr
  #   environment:
  #     - TZ=Europe/London
  #     - PUID=${TDARR_PUID}
  #     - PGID=${TDARR_PGID}
  #     - UMASK_SET=002
  #     - nodeName=MyExternalNode
  #     - serverIP=0.0.0.0
  #     - serverPort=8266
  #     - inContainer=true
  #   volumes:
  #     - tdarr_configs:/app/configs
  #     - tdarr_logs:/app/logs
  #     - /media/store/test:/media
  #     # - /transcode_cache:/temp
  #   labels:
  #     - com.centurylinklabs.watchtower.enable=true

volumes:

  homebox_data:

  tdarr_server:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/tdarr/server/"

  tdarr_configs:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/tdarr/configs/"

  tdarr_logs:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/tdarr/logs/"

  paperless_redisdata:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/paperless/redis/data/"

  paperless_dbdata:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/paperless/db/data/"

  paperless_media:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/paperless/media/"

  paperless_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/paperless/data/"

  nginx_core_conf:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/nginx_core/conf/"

  nginx_core_data:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/nginx_core/html"

  readarr:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/readarr/"

  miniflux-db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/miniflux/db/"

  photoprism_db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/photoprism/db/"
  photoprism_storage:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/photoprism/storage/"
  complete:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/downloads/"

  tv:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/tv/"

  movies:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/movies/"

  music:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/music/"

  podcasts:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/podcasts/"

  music_playlists:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/music_playlists/"

networks:
    traefik_proxy:
      external: true
      name: frontend_traefik_proxy
    photoprism:
      driver: bridge
    miniflux:
      driver: bridge
    ombi_network:
      name: ombi_network
    paperless:
      name: paperless
